{
  "version": 3,
  "sources": ["../../@elementor/library/styles/theme-config/constants.ts", "../../@elementor/library/Button/Button.tsx"],
  "sourcesContent": ["export const themePaletteSemanticColors = [\n\t'primary',\n\t'secondary',\n\t'error',\n\t'warning',\n\t'info',\n\t'success',\n\t'accent',\n\t'global',\n\t'promotion',\n] as const;\n\nexport const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';\n", "import React from 'react';\nimport { default as MuiButton, ButtonProps as MuiButtonProps } from '@mui/material/Button';\nimport { LINK_PSEUDO_SELECTORS } from '../styles/theme-config/constants';\n/**\n * Material UI has a known typescript problem with components that uses the 'component' prop:\n *\n * @see https://github.com/mui/material-ui/pull/32404#issuecomment-1105228783\n *\n * Therefore, adding a workaround by extending the source MenuProps interface and adding the 'component' prop.\n *\n * At the moment that the following PR is merged, this workaround can probably be removed:\n *\n * @see https://github.com/mui/material-ui/pull/35924\n *\n * Once the PR is merged, verify the fix by making sure that there is no typescript error in the following code:\n *\n * <Button component=\"a\" href=\"https://www.elementor.com\"></Button>\n *\n * The following components share the same problem: Button, IconButton, ToggleButton, List, ListItem, ListItemButton, MenuList, Menu, MenuItem, Paper, Dialog, Drawer, Typography.\n */\n\nexport interface ButtonProps extends MuiButtonProps {\n\tcomponent?: React.ElementType;\n\thref?: HTMLAnchorElement['href'];\n\ttarget?: HTMLAnchorElement['target'];\n}\n\nconst hardCodedColor = {\n\tprimary: '#C00BB9',\n\tglobal: '#17929B',\n};\n\nconst getLinkTextColor = ( color: ButtonProps['color'] = 'primary', variant: ButtonProps['variant'] = 'text' ) => {\n\tif ( ! color ) {\n\t\treturn;\n\t}\n\n\tif ( color === 'inherit' ) {\n\t\treturn 'inherit';\n\t}\n\n\tif ( variant === 'contained' ) {\n\t\treturn `${ color }.contrastText`;\n\t}\n\n\tif ( color in hardCodedColor ) {\n\t\treturn hardCodedColor[ color as keyof typeof hardCodedColor ];\n\t}\n\n\treturn `${ color }.main`;\n};\n\n// Modified reason: Material UI Typescript problem with the 'component' prop and handling the link global style overrides.\nconst Button = React.forwardRef<HTMLElement, ButtonProps>( ( props, ref ) => {\n\tconst { sx = {}, ...rootProps } = props;\n\tlet linkSx = {};\n\n\t// Temporary solution to prevent global styles from affecting the link color.\n\tif ( rootProps.href ) {\n\t\tlinkSx = {\n\t\t\t[ LINK_PSEUDO_SELECTORS ]: {\n\t\t\t\tcolor: getLinkTextColor( rootProps.color, rootProps.variant ),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn (\n\t\t<MuiButton\n\t\t\t{ ...props }\n\t\t\tsx={ {\n\t\t\t\t...linkSx,\n\t\t\t\t...sx,\n\t\t\t} }\n\t\t\tref={ ref as React.MutableRefObject<null> }\n\t\t/>\n\t);\n} ) as React.FC<ButtonProps>;\n\nexport default Button;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,IAAM,wBAAwB;ACerC,IAAM,iBAAiB;EACtB,SAAS;EACT,QAAQ;;AAGT,IAAM,mBAAmB,CAAE,QAA8B,WAAW,UAAkC,WAAW;AAChH,MAAK,CAAE,OAAQ;AACd;EACA;AAED,MAAK,UAAU,WAAY;AAC1B,WAAO;EACP;AAED,MAAK,YAAY,aAAc;AAC9B,WAAO,GAAI,KAAM;EACjB;AAED,MAAK,SAAS,gBAAiB;AAC9B,WAAO,eAAgB,KAAoC;EAC3D;AAED,SAAO,GAAI,KAAM;AAClB;AAGM,IAAA,SAAS,aAAAA,QAAM,WAAsC,CAAE,OAAO,QAAQ;AAC3E,QAAM,EAAE,KAAK,CAAA,GAAI,GAAG,UAAS,IAAK;AAClC,MAAI,SAAS,CAAA;AAGb,MAAK,UAAU,MAAO;AACrB,aAAS;MACR,CAAE,qBAAqB,GAAI;QAC1B,OAAO,iBAAkB,UAAU,OAAO,UAAU,OAAO;MAC3D;;EAEF;AAED,SACC,aAAAA,QAAC,cAAAC,gBAAS,EAAA,GACJ,OACL,IAAK;IACJ,GAAG;IACH,GAAG;EACH,GACD,IAAyC,CAAA;AAG5C,CAAC;",
  "names": ["React", "MuiButton"]
}
