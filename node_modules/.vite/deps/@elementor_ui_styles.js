import "./chunk-MEMWPXZ5.js";
import {
  stylis_rtl_default
} from "./chunk-XZTSLNN2.js";
import {
  CssVarsProvider,
  ThemeProvider,
  adaptV4Theme,
  createMuiStrictModeTheme,
  createStyles,
  excludeVariablesFromRoot_default,
  experimental_sx,
  extendTheme,
  getInitColorSchemeScript,
  getUnit,
  makeStyles,
  responsiveFontSizes,
  shouldSkipGeneratingVar,
  toUnitless,
  useColorScheme,
  withStyles,
  withTheme
} from "./chunk-QGKASWTV.js";
import {
  getOverlayAlpha_default
} from "./chunk-FMFFUJ5P.js";
import {
  useTheme
} from "./chunk-PMG63SNQ.js";
import {
  styled_default
} from "./chunk-OFN42TVC.js";
import {
  alpha,
  darken,
  decomposeColor,
  emphasize,
  getContrastRatio,
  getLuminance,
  hexToRgb,
  hslToRgb,
  lighten,
  recomposeColor,
  rgbToHex,
  useMediaQuery
} from "./chunk-KGCM4VSJ.js";
import "./chunk-7KSYY5OG.js";
import {
  StyledEngineProvider,
  createMixins,
  createMuiTheme,
  createTheme_default2 as createTheme_default,
  createTypography,
  duration,
  easing,
  identifier_default,
  useThemeProps2 as useThemeProps
} from "./chunk-YDHZJYY4.js";
import "./chunk-DT77FM6J.js";
import {
  css,
  emotion_cache_browser_esm_default,
  init_emotion_cache_browser_esm,
  init_emotion_react_browser_esm,
  init_stylis,
  keyframes,
  prefixer
} from "./chunk-LTODIF4Y.js";
import "./chunk-ZW3DX352.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/@elementor/ui/styles/index.esm.js
var import_react = __toESM(require_react());
init_emotion_react_browser_esm();
init_emotion_cache_browser_esm();
init_stylis();
var ColorCommonBlack = "#000000";
var ColorCommonWhite = "#ffffff";
var ColorGrey50 = "#f1f3f3";
var ColorGrey100 = "#d5d8dc";
var ColorGrey200 = "#babfc5";
var ColorGrey300 = "#9da5ae";
var ColorGrey400 = "#818a96";
var ColorGrey500 = "#69727d";
var ColorGrey600 = "#515962";
var ColorGrey700 = "#3f444b";
var ColorGrey800 = "#1f2124";
var ColorGrey900 = "#0c0d0e";
var ColorPink200 = "#f3bafd";
var ColorPink300 = "#f0abfc";
var ColorPink400 = "#eb8efb";
var ColorRed500 = "#ef4444";
var ColorRed600 = "#dc2626";
var ColorRed700 = "#b91c1c";
var ColorYellow400 = "#fbbf24";
var ColorYellow500 = "#f59e0b";
var ColorYellow600 = "#d97706";
var ColorYellow700 = "#bb5b1d";
var ColorYellow800 = "#b15211";
var ColorBlue500 = "#3b82f6";
var ColorBlue600 = "#2563eb";
var ColorBlue700 = "#1d4ed8";
var ColorGreen500 = "#10b981";
var ColorGreen600 = "#0a875a";
var ColorGreen700 = "#047857";
var ColorCyan300 = "#99f6e4";
var ColorCyan400 = "#5eead4";
var ColorCyan500 = "#2adfcd";
var ColorBurgundy700 = "#b51243";
var ColorBurgundy800 = "#93003f";
var ColorBurgundy900 = "#7e013b";
var MuiAccordion = {
  styleOverrides: {
    root: ({ theme }) => ({
      backgroundColor: theme.palette.background.default,
      "&:before": {
        // The accordion has an upper divider by default, which is not needed.
        content: "none"
      },
      "&.Mui-expanded": {
        margin: 0
      },
      "&.MuiAccordion-gutters + .MuiAccordion-root.MuiAccordion-gutters": {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(0)
      },
      "&:not(.MuiAccordion-gutters) + .MuiAccordion-root:not(.MuiAccordion-gutters)": {
        borderTop: 0
      },
      "&.Mui-disabled": {
        backgroundColor: theme.palette.background.default
      }
    })
  }
};
var MuiAccordionActions = {
  styleOverrides: {
    root: ({ theme }) => ({
      padding: theme.spacing(2)
    })
  }
};
var MuiAccordionSummary = {
  styleOverrides: {
    root: () => ({
      // Matching the default minHeight of .MuiAccordionSummary.Mui-expanded
      minHeight: "64px"
    }),
    content: ({ theme }) => ({
      margin: theme.spacing(1, 0),
      "&.MuiAccordionSummary-content.Mui-expanded": {
        margin: theme.spacing(1, 0)
      }
    })
  }
};
var MuiAppBar = {
  defaultProps: {
    elevation: 0,
    color: "default"
  }
};
var MuiAutocomplete = {
  defaultProps: {
    slotProps: {
      paper: {
        elevation: 6
      }
    }
  }
};
var MuiButton = {
  styleOverrides: {
    root: () => ({
      boxShadow: "none",
      whiteSpace: "nowrap",
      "&:hover": {
        boxShadow: "none"
      },
      "& .MuiSvgIcon-root": {
        fill: "currentColor"
      }
    })
  },
  variants: [
    {
      props: { color: "primary", variant: "outlined" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#C00BB9",
        borderColor: "#C00BB9",
        "&:hover": {
          borderColor: "#C00BB9"
        }
      })
    },
    {
      props: { color: "primary", variant: "text" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#C00BB9"
      })
    },
    {
      props: { color: "global", variant: "outlined" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#17929B",
        borderColor: "#17929B",
        "&:hover": {
          borderColor: "#17929B"
        }
      })
    },
    {
      props: { color: "global", variant: "text" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#17929B"
      })
    }
  ]
};
var MuiButtonBase = {
  defaultProps: {
    disableRipple: true
  },
  styleOverrides: {
    root: () => ({
      "&.MuiButtonBase-root.Mui-focusVisible": {
        // Temp customization for accessibility (using 'border' because 'outline' is not working properly in Tabs).
        boxShadow: "0 0 0 1px inset"
      },
      // The CircularProgress component used as a loader of the buttons.
      ".MuiCircularProgress-root": {
        fontSize: "inherit"
      }
    })
  }
};
var themePaletteSemanticColors = [
  "primary",
  "secondary",
  "error",
  "warning",
  "info",
  "success",
  "accent",
  "global",
  "promotion"
];
var LINK_PSEUDO_SELECTORS = "&:hover,&:focus,&:active,&:visited";
var MuiButtonGroup = {
  defaultProps: {
    disableRipple: true
  },
  styleOverrides: {
    root: () => ({
      boxShadow: "none",
      "&:hover": {
        boxShadow: "none"
      }
    })
  },
  variants: themePaletteSemanticColors.map((color) => ({
    props: { variant: "contained", color },
    // Fixing a Material UI bug when one of the group children is wrapped with another element (e.g. a tooltip).
    style: ({ theme }) => {
      return {
        // Removing the border of the grouped buttons for supporting additional children types.
        "& .MuiButtonGroup-grouped:not(:last-of-type), & .MuiButtonGroup-grouped:not(:last-of-type).Mui-disabled": {
          borderRight: 0
        },
        // Supporting additional children types, when a button can be inside another element (e.g. a tooltip).
        "& .MuiButtonGroup-grouped:not(:last-child), & > *:not(:last-child) .MuiButtonGroup-grouped": {
          borderRight: `1px solid ${theme.palette[color].dark}`
        },
        // Supporting additional children types, when a disabled button can be inside another element (e.g. a tooltip).
        "& .MuiButtonGroup-grouped:not(:last-child).Mui-disabled, & > *:not(:last-child) .MuiButtonGroup-grouped.Mui-disabled": {
          borderRight: `1px solid ${theme.palette.action.disabled}`
        }
      };
    }
  }))
};
var MuiChip = {
  variants: [
    {
      props: { color: "primary", variant: "outlined" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#C00BB9",
        borderColor: "#C00BB9",
        "& .MuiChip-deleteIcon": {
          color: "#D355CE",
          "&:hover": {
            color: "#C00BB9"
          }
        }
      })
    },
    {
      props: { color: "global", variant: "outlined" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#17929B",
        borderColor: "#17929B",
        "& .MuiChip-deleteIcon": {
          color: "#5DB3B9",
          "&:hover": {
            color: "#17929B"
          }
        }
      })
    }
  ]
};
var MuiCircularProgress = {
  defaultProps: {
    color: "inherit",
    /**
     * Customizing to 1em for easy customization by other components that wrap the CircularProgress.
     * Setting the default size value in the styleOverrides fontSize property.
     */
    size: "1em"
  },
  styleOverrides: {
    root: ({ theme }) => ({
      // Temporarily reading the value from the spacing, until we'll find a better solution.
      fontSize: theme.spacing(5)
    })
  }
};
var MuiDialogContent = {
  styleOverrides: {
    dividers: () => ({
      "&:last-child": {
        // Fixing Material UI bug - when the divider is the last child it should not be shown.
        borderBottom: "none"
      }
    })
  }
};
var MuiDialogTitle = {
  styleOverrides: {
    root: ({ theme }) => ({
      fontWeight: theme.typography.fontWeightBold
    })
  }
};
var MuiFormHelperText = {
  styleOverrides: {
    root: ({ theme }) => ({
      color: theme.palette.text.tertiary,
      margin: theme.spacing(0.5, 0, 0)
    })
  }
};
var MuiIconButton = {
  variants: [
    {
      props: { color: "primary" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#C00BB9"
      })
    },
    {
      props: { color: "global" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        color: "#17929B"
      })
    },
    {
      props: { edge: "start", size: "small" },
      style: ({ theme }) => ({
        marginLeft: theme.spacing(-1.5)
      })
    },
    {
      props: { edge: "end", size: "small" },
      style: ({ theme }) => ({
        marginRight: theme.spacing(-1.5)
      })
    },
    {
      props: { edge: "start", size: "large" },
      style: ({ theme }) => ({
        marginLeft: theme.spacing(-2)
      })
    },
    {
      props: { edge: "end", size: "large" },
      style: ({ theme }) => ({
        marginRight: theme.spacing(-2)
      })
    }
  ]
};
var MuiInputBase = {
  styleOverrides: {
    input: () => ({
      // Setting the background color to prevent global style overrides.
      ".MuiInputBase-root.Mui-disabled &": {
        backgroundColor: "initial"
      }
    })
  }
};
var MuiListItem = {
  styleOverrides: {
    root: ({ theme }) => ({
      color: theme.palette.text.primary,
      // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
      "a&": {
        [LINK_PSEUDO_SELECTORS]: {
          color: theme.palette.text.primary
        }
      }
    })
  }
};
var MuiListItemButton = {
  styleOverrides: {
    root: ({ theme }) => ({
      color: theme.palette.text.primary,
      // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
      "a&": {
        [LINK_PSEUDO_SELECTORS]: {
          color: theme.palette.text.primary
        }
      }
    })
  }
};
var MuiListItemText = {
  styleOverrides: {
    root: ({ theme }) => ({
      color: theme.palette.text.primary
    })
  }
};
var PAPER_BACKGROUND_IMAGE = "linear-gradient(rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12))";
var MuiPaper = {};
var MuiListSubheader = {
  styleOverrides: {
    root: ({ theme }) => ({
      // The background color should be the same as the drop-downs background color.
      backgroundImage: PAPER_BACKGROUND_IMAGE,
      // Temp value until there will be a token in the design system.
      lineHeight: "36px",
      color: theme.palette.text.tertiary,
      fontSize: theme.typography.caption.fontSize,
      fontWeight: theme.typography.caption.fontWeight,
      fontFamily: theme.typography.caption.fontFamily,
      letterSpacing: theme.typography.caption.letterSpacing
    })
  }
};
var MuiMenu = {
  defaultProps: {
    elevation: 6
  }
};
var MuiMenuItem = {
  styleOverrides: {
    root: ({ theme }) => ({
      // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
      "a&": {
        [LINK_PSEUDO_SELECTORS]: {
          color: theme.palette.text.primary
        }
      }
    })
  }
};
var MuiSelect = {
  styleOverrides: {
    nativeInput: () => ({
      // Setting the background color and opacity to prevent global style overrides.
      ".MuiInputBase-root.Mui-disabled &": {
        backgroundColor: "initial",
        opacity: 0
      }
    })
  }
};
var MuiStepIcon = {
  styleOverrides: {
    root: ({ theme }) => ({
      "&:not(.Mui-active) .MuiStepIcon-text": {
        fill: theme.palette.common.white
      }
    })
  }
};
var MuiStepLabel = {
  styleOverrides: {
    root: () => ({
      alignItems: "flex-start"
    })
  }
};
var MuiStepper = {
  styleOverrides: {
    root: () => ({
      "& .MuiStepLabel-root": {
        alignItems: "center"
      }
    })
  }
};
var MuiToggleButton = {
  variants: [
    {
      props: { color: "primary" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        "&.MuiToggleButton-root.Mui-selected": {
          color: "#C00BB9"
        }
      })
    },
    {
      props: { color: "global" },
      style: () => ({
        // Temporary customizations until it will be decided in the design-system.
        "&.MuiToggleButton-root.Mui-selected": {
          color: "#17929B"
        }
      })
    }
  ]
};
var MuiTooltip = {
  defaultProps: {
    arrow: true
  }
};
var components = {
  MuiAccordion,
  MuiAccordionActions,
  MuiAccordionSummary,
  MuiAppBar,
  MuiAutocomplete,
  MuiButton,
  MuiButtonBase,
  MuiButtonGroup,
  MuiChip,
  MuiCircularProgress,
  MuiDialogContent,
  MuiDialogTitle,
  MuiFormHelperText,
  MuiIconButton,
  MuiInputBase,
  MuiListItem,
  MuiListItemButton,
  MuiListItemText,
  MuiListSubheader,
  MuiMenu,
  MuiMenuItem,
  MuiPaper,
  MuiSelect,
  MuiStepIcon,
  MuiStepLabel,
  MuiStepper,
  MuiToggleButton,
  MuiTooltip
};
var themeBaseConfig = {
  components,
  typography: {
    button: {
      textTransform: "none"
    },
    subtitle1: {
      lineHeight: 1.3
    },
    subtitle2: {
      lineHeight: 1.3
    }
  }
};
var lightTheme = createTheme_default({
  ...themeBaseConfig,
  palette: {
    mode: "light",
    primary: {
      main: ColorPink300,
      light: ColorPink200,
      dark: ColorPink400,
      contrastText: ColorGrey900
    },
    secondary: {
      main: ColorGrey600,
      light: ColorGrey500,
      dark: ColorGrey700,
      contrastText: ColorCommonWhite
    },
    grey: {
      50: ColorGrey50,
      100: ColorGrey100,
      200: ColorGrey200,
      300: ColorGrey300,
      400: ColorGrey400,
      500: ColorGrey500,
      600: ColorGrey600,
      700: ColorGrey700,
      800: ColorGrey800,
      900: ColorGrey900
    },
    text: {
      primary: ColorGrey900,
      secondary: ColorGrey700,
      tertiary: ColorGrey500,
      disabled: ColorGrey300
    },
    background: {
      paper: ColorCommonWhite,
      default: ColorCommonWhite
    },
    success: {
      main: ColorGreen600,
      light: ColorGreen500,
      dark: ColorGreen700,
      contrastText: ColorCommonWhite
    },
    error: {
      main: ColorRed600,
      light: ColorRed500,
      dark: ColorRed700,
      contrastText: ColorCommonWhite
    },
    warning: {
      main: ColorYellow700,
      light: ColorYellow600,
      dark: ColorYellow800,
      contrastText: ColorCommonWhite
    },
    info: {
      main: ColorBlue600,
      light: ColorBlue500,
      dark: ColorBlue700,
      contrastText: ColorCommonWhite
    },
    global: {
      main: ColorCyan400,
      light: ColorCyan300,
      dark: ColorCyan500,
      contrastText: ColorGrey900
    },
    // TODO: the accent values should be updated as part of a deprecation process.
    accent: {
      main: ColorBurgundy800,
      light: ColorBurgundy700,
      dark: ColorBurgundy900,
      contrastText: ColorCommonWhite
    },
    promotion: {
      main: ColorBurgundy800,
      light: ColorBurgundy700,
      dark: ColorBurgundy900,
      contrastText: ColorCommonWhite
    }
  }
});
var darkTheme = createTheme_default({
  ...themeBaseConfig,
  palette: {
    mode: "dark",
    primary: {
      main: ColorPink300,
      light: ColorPink200,
      dark: ColorPink400,
      contrastText: ColorGrey900
    },
    secondary: {
      main: ColorGrey300,
      light: ColorGrey200,
      dark: ColorGrey400,
      contrastText: ColorGrey900
    },
    grey: {
      50: ColorGrey50,
      100: ColorGrey100,
      200: ColorGrey200,
      300: ColorGrey300,
      400: ColorGrey400,
      500: ColorGrey500,
      600: ColorGrey600,
      700: ColorGrey700,
      800: ColorGrey800,
      900: ColorGrey900
    },
    text: {
      primary: ColorCommonWhite,
      secondary: ColorGrey200,
      tertiary: ColorGrey300,
      disabled: ColorGrey600
    },
    background: {
      paper: ColorGrey900,
      default: ColorGrey800
    },
    success: {
      main: ColorGreen600,
      light: ColorGreen500,
      dark: ColorGreen700,
      contrastText: ColorCommonWhite
    },
    error: {
      main: ColorRed600,
      light: ColorRed500,
      dark: ColorRed700,
      contrastText: ColorCommonWhite
    },
    warning: {
      main: ColorYellow500,
      light: ColorYellow400,
      dark: ColorYellow800,
      contrastText: ColorCommonBlack
    },
    info: {
      main: ColorBlue600,
      light: ColorBlue500,
      dark: ColorBlue700,
      contrastText: ColorCommonWhite
    },
    global: {
      main: ColorCyan400,
      light: ColorCyan300,
      dark: ColorCyan500,
      contrastText: ColorGrey900
    },
    // TODO: the accent values should be updated as part of a deprecation process.
    accent: {
      main: ColorBurgundy800,
      light: ColorBurgundy700,
      dark: ColorBurgundy900,
      contrastText: ColorCommonWhite
    },
    promotion: {
      main: ColorBurgundy800,
      light: ColorBurgundy700,
      dark: ColorBurgundy900,
      contrastText: ColorCommonWhite
    }
  }
});
var DirectionContext = import_react.default.createContext(false);
emotion_cache_browser_esm_default({
  // Define class names prefix.
  key: "eui-rtl",
  stylisPlugins: [prefixer, stylis_rtl_default]
});
var ThemeProvider2 = ({ colorScheme = "auto", children }) => {
  const rtl = (0, import_react.useContext)(DirectionContext);
  const prefersDarkMode = useMediaQuery("(prefers-color-scheme: dark)");
  const theme = (0, import_react.useMemo)(() => {
    const themeData = colorScheme === "auto" && prefersDarkMode || colorScheme === "dark" ? darkTheme : lightTheme;
    if (rtl) {
      return createTheme_default(themeData, { direction: "rtl" });
    }
    return themeData;
  }, [rtl, colorScheme, prefersDarkMode]);
  return import_react.default.createElement(ThemeProvider, { theme }, children);
};
var createSlots = (componentName, componentSlots) => {
  const slots = {};
  const classNames = {};
  componentSlots.forEach((slot) => {
    classNames[slot] = `Mui${componentName}-${slot}`;
    slots[slot] = {
      slot,
      name: `Mui${componentName}`
    };
  });
  return {
    slots,
    classNames
  };
};
var index = {};
export {
  CssVarsProvider as Experimental_CssVarsProvider,
  StyledEngineProvider,
  identifier_default as THEME_ID,
  ThemeProvider2 as ThemeProvider,
  adaptV4Theme,
  alpha,
  createMuiTheme,
  createSlots,
  createStyles,
  createTheme_default as createTheme,
  css,
  darken,
  decomposeColor,
  index as default,
  duration,
  easing,
  emphasize,
  styled_default as experimentalStyled,
  extendTheme as experimental_extendTheme,
  experimental_sx,
  getContrastRatio,
  getInitColorSchemeScript,
  getLuminance,
  getOverlayAlpha_default as getOverlayAlpha,
  hexToRgb,
  hslToRgb,
  keyframes,
  lighten,
  makeStyles,
  createMixins as private_createMixins,
  createTypography as private_createTypography,
  excludeVariablesFromRoot_default as private_excludeVariablesFromRoot,
  recomposeColor,
  responsiveFontSizes,
  rgbToHex,
  shouldSkipGeneratingVar,
  styled_default as styled,
  createMuiStrictModeTheme as unstable_createMuiStrictModeTheme,
  getUnit as unstable_getUnit,
  toUnitless as unstable_toUnitless,
  useColorScheme,
  useTheme,
  useThemeProps,
  withStyles,
  withTheme
};
//# sourceMappingURL=@elementor_ui_styles.js.map
