'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var MuiAlert = require('@mui/material/Alert');
var clsx = require('clsx');
var MuiIconButton$1 = require('@mui/material/IconButton');
var MuiSvgIcon = require('@mui/material/SvgIcon');
var styles = require('@mui/material/styles');
var rtlPlugin = require('stylis-plugin-rtl');
require('@emotion/react');
var createCache = require('@emotion/cache');
var stylis = require('stylis');
require('@mui/material/useMediaQuery');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var MuiAlert__default = /*#__PURE__*/_interopDefaultLegacy(MuiAlert);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var MuiIconButton__default = /*#__PURE__*/_interopDefaultLegacy(MuiIconButton$1);
var MuiSvgIcon__default = /*#__PURE__*/_interopDefaultLegacy(MuiSvgIcon);
var rtlPlugin__default = /*#__PURE__*/_interopDefaultLegacy(rtlPlugin);
var createCache__default = /*#__PURE__*/_interopDefaultLegacy(createCache);

// Modified reason: Material UI Typescript problem with the 'component' prop.
const IconButton = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiIconButton__default["default"], { ...props, ref: ref }));
});

const SvgIcon = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiSvgIcon__default["default"], { ...props, ref: ref }));
});

/**
 * Do not edit directly
 * Generated on Wed, 10 Jan 2024 15:06:56 GMT
 */
const ColorCommonBlack = "#000000";
const ColorCommonWhite = "#ffffff";
const ColorGrey50 = "#f1f3f3";
const ColorGrey100 = "#d5d8dc";
const ColorGrey200 = "#babfc5";
const ColorGrey300 = "#9da5ae";
const ColorGrey400 = "#818a96";
const ColorGrey500 = "#69727d";
const ColorGrey600 = "#515962";
const ColorGrey700 = "#3f444b";
const ColorGrey800 = "#1f2124";
const ColorGrey900 = "#0c0d0e";
const ColorPink200 = "#f3bafd";
const ColorPink300 = "#f0abfc";
const ColorPink400 = "#eb8efb";
const ColorRed500 = "#ef4444";
const ColorRed600 = "#dc2626";
const ColorRed700 = "#b91c1c";
const ColorYellow400 = "#fbbf24";
const ColorYellow500 = "#f59e0b";
const ColorYellow600 = "#d97706";
const ColorYellow700 = "#bb5b1d";
const ColorYellow800 = "#b15211";
const ColorBlue500 = "#3b82f6";
const ColorBlue600 = "#2563eb";
const ColorBlue700 = "#1d4ed8";
const ColorGreen500 = "#10b981";
const ColorGreen600 = "#0a875a";
const ColorGreen700 = "#047857";
const ColorCyan300 = "#99f6e4";
const ColorCyan400 = "#5eead4";
const ColorCyan500 = "#2adfcd";
const ColorBurgundy700 = "#b51243";
const ColorBurgundy800 = "#93003f";
const ColorBurgundy900 = "#7e013b";

const MuiAccordion = {
    styleOverrides: {
        root: ({ theme }) => ({
            backgroundColor: theme.palette.background.default,
            '&:before': {
                // The accordion has an upper divider by default, which is not needed.
                content: 'none',
            },
            '&.Mui-expanded': {
                margin: 0,
            },
            '&.MuiAccordion-gutters + .MuiAccordion-root.MuiAccordion-gutters': {
                marginTop: theme.spacing(1),
                marginBottom: theme.spacing(0),
            },
            '&:not(.MuiAccordion-gutters) + .MuiAccordion-root:not(.MuiAccordion-gutters)': {
                borderTop: 0,
            },
            '&.Mui-disabled': {
                backgroundColor: theme.palette.background.default,
            },
        }),
    },
};

const MuiAccordionActions = {
    styleOverrides: {
        root: ({ theme }) => ({
            padding: theme.spacing(2),
        }),
    },
};

const MuiAccordionSummary = {
    styleOverrides: {
        root: () => ({
            // Matching the default minHeight of .MuiAccordionSummary.Mui-expanded
            minHeight: '64px',
        }),
        content: ({ theme }) => ({
            margin: theme.spacing(1, 0),
            '&.MuiAccordionSummary-content.Mui-expanded': {
                margin: theme.spacing(1, 0),
            },
        }),
    },
};

const MuiAppBar = {
    defaultProps: {
        elevation: 0,
        color: 'default',
    },
};

const MuiAutocomplete = {
    defaultProps: {
        slotProps: {
            paper: {
                elevation: 6,
            },
        },
    },
};

const MuiButton = {
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            whiteSpace: 'nowrap',
            '&:hover': {
                boxShadow: 'none',
            },
            '& .MuiSvgIcon-root': {
                fill: 'currentColor',
            },
        }),
    },
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '&:hover': {
                    borderColor: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'primary', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '&:hover': {
                    borderColor: '#17929B',
                },
            }),
        },
        {
            props: { color: 'global', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
    ],
};

const MuiButtonBase = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            '&.MuiButtonBase-root.Mui-focusVisible': {
                // Temp customization for accessibility (using 'border' because 'outline' is not working properly in Tabs).
                boxShadow: '0 0 0 1px inset',
            },
            // The CircularProgress component used as a loader of the buttons.
            '.MuiCircularProgress-root': {
                fontSize: 'inherit',
            },
        }),
    },
};

const themePaletteSemanticColors = [
    'primary',
    'secondary',
    'error',
    'warning',
    'info',
    'success',
    'accent',
    'global',
    'promotion',
];
const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';

const MuiButtonGroup = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            '&:hover': {
                boxShadow: 'none',
            },
        }),
    },
    variants: themePaletteSemanticColors.map((color) => ({
        props: { variant: 'contained', color },
        // Fixing a Material UI bug when one of the group children is wrapped with another element (e.g. a tooltip).
        style: ({ theme }) => {
            return {
                // Removing the border of the grouped buttons for supporting additional children types.
                '& .MuiButtonGroup-grouped:not(:last-of-type), & .MuiButtonGroup-grouped:not(:last-of-type).Mui-disabled': {
                    borderRight: 0,
                },
                // Supporting additional children types, when a button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child), & > *:not(:last-child) .MuiButtonGroup-grouped': {
                    borderRight: `1px solid ${theme.palette[color].dark}`,
                },
                // Supporting additional children types, when a disabled button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child).Mui-disabled, & > *:not(:last-child) .MuiButtonGroup-grouped.Mui-disabled': {
                    borderRight: `1px solid ${theme.palette.action.disabled}`,
                },
            };
        },
    })),
};

const MuiChip = {
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '& .MuiChip-deleteIcon': {
                    color: '#D355CE',
                    '&:hover': {
                        color: '#C00BB9',
                    },
                },
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '& .MuiChip-deleteIcon': {
                    color: '#5DB3B9',
                    '&:hover': {
                        color: '#17929B',
                    },
                },
            }),
        },
    ],
};

const MuiCircularProgress = {
    defaultProps: {
        color: 'inherit',
        /**
         * Customizing to 1em for easy customization by other components that wrap the CircularProgress.
         * Setting the default size value in the styleOverrides fontSize property.
         */
        size: '1em',
    },
    styleOverrides: {
        root: ({ theme }) => ({
            // Temporarily reading the value from the spacing, until we'll find a better solution.
            fontSize: theme.spacing(5),
        }),
    },
};

const MuiDialogContent = {
    styleOverrides: {
        dividers: () => ({
            '&:last-child': {
                // Fixing Material UI bug - when the divider is the last child it should not be shown.
                borderBottom: 'none',
            },
        }),
    },
};

const MuiDialogTitle = {
    styleOverrides: {
        root: ({ theme }) => ({
            fontWeight: theme.typography.fontWeightBold,
        }),
    },
};

const MuiFormHelperText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.tertiary,
            margin: theme.spacing(0.5, 0, 0),
        }),
    },
};

const MuiIconButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
        {
            props: { edge: 'start', size: 'small' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'end', size: 'small' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'start', size: 'large' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-2),
            }),
        },
        {
            props: { edge: 'end', size: 'large' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-2),
            }),
        },
    ],
};

const MuiInputBase = {
    styleOverrides: {
        input: () => ({
            // Setting the background color to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
            },
        }),
    },
};

const MuiListItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemButton = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
        }),
    },
};

// TODO: update the relevant components when the paper background image is changed.
const PAPER_BACKGROUND_IMAGE = 'linear-gradient(rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12))';
/**
 * The purpose of this empty configuration object is to make sure that all components that uses the PAPER_BACKGROUND_IMAGE const,
 * Should also be adjusted if the paper background image is changed.
 */
const MuiPaper = {};

const MuiListSubheader = {
    styleOverrides: {
        root: ({ theme }) => ({
            // The background color should be the same as the drop-downs background color.
            backgroundImage: PAPER_BACKGROUND_IMAGE,
            // Temp value until there will be a token in the design system.
            lineHeight: '36px',
            color: theme.palette.text.tertiary,
            fontSize: theme.typography.caption.fontSize,
            fontWeight: theme.typography.caption.fontWeight,
            fontFamily: theme.typography.caption.fontFamily,
            letterSpacing: theme.typography.caption.letterSpacing,
        }),
    },
};

const MuiMenu = {
    defaultProps: {
        elevation: 6,
    },
};

const MuiMenuItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiSelect = {
    styleOverrides: {
        nativeInput: () => ({
            // Setting the background color and opacity to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
                opacity: 0,
            },
        }),
    },
};

const MuiStepIcon = {
    styleOverrides: {
        root: ({ theme }) => ({
            '&:not(.Mui-active) .MuiStepIcon-text': {
                fill: theme.palette.common.white,
            },
        }),
    },
};

const MuiStepLabel = {
    styleOverrides: {
        root: () => ({
            alignItems: 'flex-start',
        }),
    },
};

const MuiStepper = {
    styleOverrides: {
        root: () => ({
            '& .MuiStepLabel-root': {
                alignItems: 'center',
            },
        }),
    },
};

const MuiToggleButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#17929B',
                },
            }),
        },
    ],
};

const MuiTooltip = {
    defaultProps: {
        arrow: true,
    },
};

var components = {
    MuiAccordion,
    MuiAccordionActions,
    MuiAccordionSummary,
    MuiAppBar,
    MuiAutocomplete,
    MuiButton,
    MuiButtonBase,
    MuiButtonGroup,
    MuiChip,
    MuiCircularProgress,
    MuiDialogContent,
    MuiDialogTitle,
    MuiFormHelperText,
    MuiIconButton,
    MuiInputBase,
    MuiListItem,
    MuiListItemButton,
    MuiListItemText,
    MuiListSubheader,
    MuiMenu,
    MuiMenuItem,
    MuiPaper,
    MuiSelect,
    MuiStepIcon,
    MuiStepLabel,
    MuiStepper,
    MuiToggleButton,
    MuiTooltip,
};

const themeBaseConfig = {
    components,
    typography: {
        button: {
            textTransform: 'none',
        },
        subtitle1: {
            lineHeight: 1.3,
        },
        subtitle2: {
            lineHeight: 1.3,
        },
    },
};

styles.createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'light',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey600,
            light: ColorGrey500,
            dark: ColorGrey700,
            contrastText: ColorCommonWhite,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorGrey900,
            secondary: ColorGrey700,
            tertiary: ColorGrey500,
            disabled: ColorGrey300,
        },
        background: {
            paper: ColorCommonWhite,
            default: ColorCommonWhite,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow700,
            light: ColorYellow600,
            dark: ColorYellow800,
            contrastText: ColorCommonWhite,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

styles.createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'dark',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey300,
            light: ColorGrey200,
            dark: ColorGrey400,
            contrastText: ColorGrey900,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorCommonWhite,
            secondary: ColorGrey200,
            tertiary: ColorGrey300,
            disabled: ColorGrey600,
        },
        background: {
            paper: ColorGrey900,
            default: ColorGrey800,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow500,
            light: ColorYellow400,
            dark: ColorYellow800,
            contrastText: ColorCommonBlack,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

React__default["default"].createContext(false);
/**
 * @see https://mui.com/material-ui/guides/right-to-left/
 */
createCache__default["default"]({
    // Define class names prefix.
    key: 'eui-rtl',
    stylisPlugins: [stylis.prefixer, rtlPlugin__default["default"]],
});

const createSlots = (componentName, componentSlots) => {
    const slots = {};
    const classNames = {};
    componentSlots.forEach((slot) => {
        classNames[slot] = `Mui${componentName}-${slot}`;
        slots[slot] = {
            slot,
            name: `Mui${componentName}`,
        };
    });
    return {
        slots,
        classNames,
    };
};

const XIcon = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18.5303 5.46967C18.8232 5.76256 18.8232 6.23744 18.5303 6.53033L6.53033 18.5303C6.23744 18.8232 5.76256 18.8232 5.46967 18.5303C5.17678 18.2374 5.17678 17.7626 5.46967 17.4697L17.4697 5.46967C17.7626 5.17678 18.2374 5.17678 18.5303 5.46967Z" }),
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.46967 5.46967C5.76256 5.17678 6.23744 5.17678 6.53033 5.46967L18.5303 17.4697C18.8232 17.7626 18.8232 18.2374 18.5303 18.5303C18.2374 18.8232 17.7626 18.8232 17.4697 18.5303L5.46967 6.53033C5.17678 6.23744 5.17678 5.76256 5.46967 5.46967Z" })));
});
const { slots: slots$1, classNames: classNames$1 } = createSlots('CloseButton', ['root', 'icon']);
const Root = styles.styled(IconButton, slots$1.root)({});
const Icon = styles.styled(XIcon, slots$1.icon)({});
const CloseButton = React__default["default"].forwardRef((inProps, ref) => {
    const props = styles.useThemeProps({ props: inProps, name: slots$1.root.name });
    const { slotProps = {}, ...rootProps } = props;
    return (React__default["default"].createElement(Root, { ...rootProps, size: "small", ref: ref, className: clsx__default["default"]([[classNames$1.root, rootProps.className]]), ownerState: props },
        React__default["default"].createElement(Icon, { ...slotProps.icon, className: clsx__default["default"]([classNames$1.icon, slotProps.icon?.className]), ownerState: props })));
});
CloseButton.defaultProps = {
    'aria-label': 'close',
    color: 'default',
};

const StyledAlert = styles.styled(MuiAlert__default["default"])(({ theme, severity, color, variant }) => {
    const variantsStyle = getVariantsStyle(severity, color, variant, theme);
    return {
        padding: theme.spacing(1.5, 2),
        '& .MuiAlert-message': {
            width: '100%',
            padding: 0,
            minHeight: '30.75px',
            display: 'flex',
            flexDirection: 'row',
            flexWrap: 'wrap',
            gap: theme.spacing(1.5),
        },
        '& .MuiAlertTitle-root': {
            marginBottom: 0,
            lineHeight: 'inherit',
            marginRight: theme.spacing(0.5),
            ...theme.typography.subtitle2,
            marginTop: 0,
        },
        '& .MuiAlert-icon': {
            padding: 0,
            paddingTop: theme.spacing(0.5),
        },
        '& .MuiAlert-action': {
            padding: 0,
            marginLeft: theme.spacing(1),
        },
        '&.MuiAlert-filledWarning': {
            color: theme.palette.common.white,
        },
        ...variantsStyle,
    };
});
const { slots, classNames } = createSlots('Alert', ['actions', 'content']);
const StyledAlertContent = styles.styled('div', slots.content)(() => ({
    flexGrow: 1,
    paddingTop: '6px',
}));
const StyledAlertContentInnerContainer = styles.styled('div', slots.content)(({ theme }) => ({
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap',
    gap: theme.spacing(0.25),
    maxWidth: '800px',
}));
const AlertContent = ({ children, ...props }) => {
    return (React__default["default"].createElement(StyledAlertContent, { ...props },
        React__default["default"].createElement(StyledAlertContentInnerContainer, null, children)));
};
const StyledAlertActions = styles.styled('div')(({ theme }) => ({
    display: 'flex',
    alignItems: 'flex-start',
    flexWrap: 'wrap',
    gap: theme.spacing(1),
}));
// Modified reason: Allowing multiple actions with responsive layout.
const Alert = React__default["default"].forwardRef(({ onClose, action, secondaryAction, children, ...props }, ref) => {
    const hasActions = Boolean(action || secondaryAction);
    return (React__default["default"].createElement(StyledAlert, { iconMapping: {
            success: React__default["default"].createElement(SuccessIcon, null),
            error: React__default["default"].createElement(ErrorIcon, null),
            info: React__default["default"].createElement(InfoIcon, null),
            warning: React__default["default"].createElement(WarningIcon, null),
        }, ...props, ref: ref, action: onClose
            ? (React__default["default"].createElement(CloseButton, { color: "inherit", onClick: onClose, slotProps: {
                    icon: {
                        fontSize: 'small',
                    },
                }, title: props.closeText, "aria-label": props.closeText }))
            : false },
        React__default["default"].createElement(AlertContent, { className: classNames.content }, children),
        hasActions && (React__default["default"].createElement(StyledAlertActions, { className: classNames.actions },
            secondaryAction,
            action))));
});
Alert.defaultProps = {
    closeText: 'Close',
    severity: 'success',
};
function getVariantsStyle(severity, color, variant, theme) {
    // In Mui, the color prop has a higher priority than the severity prop.
    const semanticColor = color || severity;
    if (!semanticColor) {
        return {};
    }
    if (variant === 'filled') {
        return {
            '& .MuiButton-containedInherit': {
                color: theme.palette[semanticColor].main,
                backgroundColor: 'rgba(255, 255, 255, 1)',
                '&:hover': {
                    backgroundColor: 'rgba(255, 255, 255, .96)',
                },
            },
            '& .MuiButton-outlinedInherit:hover': {
                backgroundColor: theme.palette[semanticColor].dark,
            },
            // Setting the pseudo-classes color to prevent the override of global CSS with higher specificity than the Button component.
            '& a.MuiButtonBase-root.MuiButton-containedInherit': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette[semanticColor].main,
                },
            },
        };
    }
    return {
        '&.MuiAlert-root': {
            color: theme.palette.text.secondary,
        },
        '& .MuiCloseButton-root': {
            color: theme.palette.action.active,
        },
        '& .MuiButton-containedInherit': {
            color: theme.palette[semanticColor].contrastText,
            backgroundColor: theme.palette[semanticColor].main,
            '&:hover': {
                backgroundColor: theme.palette[semanticColor].dark,
            },
        },
        '& .MuiButton-outlinedInherit': {
            borderColor: theme.palette[semanticColor].main,
            color: theme.palette[semanticColor].main,
            '&:hover': {
                backgroundColor: styles.alpha(theme.palette[semanticColor].main, 0.08),
            },
        },
        // Setting the pseudo-classes color to prevent the override of global CSS with higher specificity than the Button component.
        '& a.MuiButtonBase-root.MuiButton-containedInherit': {
            [LINK_PSEUDO_SELECTORS]: {
                color: theme.palette[semanticColor].contrastText,
            },
        },
        '& a.MuiButtonBase-root.MuiButton-outlinedInherit': {
            [LINK_PSEUDO_SELECTORS]: {
                color: theme.palette[semanticColor].main,
            },
        },
    };
}
function SuccessIcon() {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2.25C10.7196 2.25 9.45176 2.50219 8.26884 2.99217C7.08591 3.48216 6.01108 4.20034 5.10571 5.10571C4.20034 6.01108 3.48216 7.08591 2.99217 8.26884C2.50219 9.45176 2.25 10.7196 2.25 12C2.25 13.2804 2.50219 14.5482 2.99217 15.7312C3.48216 16.9141 4.20034 17.9889 5.10571 18.8943C6.01108 19.7997 7.08591 20.5178 8.26884 21.0078C9.45176 21.4978 10.7196 21.75 12 21.75C13.2804 21.75 14.5482 21.4978 15.7312 21.0078C16.9141 20.5178 17.9889 19.7997 18.8943 18.8943C19.7997 17.9889 20.5178 16.9141 21.0078 15.7312C21.4978 14.5482 21.75 13.2804 21.75 12C21.75 10.7196 21.4978 9.45176 21.0078 8.26884C20.5178 7.08591 19.7997 6.01108 18.8943 5.10571C17.9889 4.20034 16.9141 3.48216 15.7312 2.99217C14.5482 2.50219 13.2804 2.25 12 2.25ZM16.2415 10.0563C16.5344 9.76339 16.5344 9.28852 16.2415 8.99563C15.9486 8.70273 15.4737 8.70273 15.1809 8.99563L10.7631 13.4134L8.81939 11.4697C8.5265 11.1768 8.05163 11.1768 7.75873 11.4697C7.46584 11.7626 7.46584 12.2374 7.75873 12.5303L10.2328 15.0044C10.3734 15.145 10.5642 15.224 10.7631 15.224C10.962 15.224 11.1528 15.145 11.2934 15.0044L16.2415 10.0563Z" })));
}
function InfoIcon() {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2.25 11.75C2.25 6.36522 6.61522 2 12 2C17.3848 2 21.75 6.36522 21.75 11.75C21.75 17.1348 17.3848 21.5 12 21.5C6.61522 21.5 2.25 17.1348 2.25 11.75ZM11.25 7.75C11.25 7.33579 11.5858 7 12 7H12.01C12.4242 7 12.76 7.33579 12.76 7.75C12.76 8.16421 12.4242 8.5 12.01 8.5H12C11.5858 8.5 11.25 8.16421 11.25 7.75ZM10.25 11.75C10.25 11.3358 10.5858 11 11 11H12C12.4142 11 12.75 11.3358 12.75 11.75V15H13C13.4142 15 13.75 15.3358 13.75 15.75C13.75 16.1642 13.4142 16.5 13 16.5H12C11.5858 16.5 11.25 16.1642 11.25 15.75V12.5H11C10.5858 12.5 10.25 12.1642 10.25 11.75Z" })));
}
function ErrorIcon() {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.7 2.25C8.46249 2.25 8.23103 2.29047 8.0079 2.38964C7.78802 2.48736 7.61395 2.62539 7.46967 2.76967L2.76967 7.46967C2.62539 7.61395 2.48736 7.78802 2.38964 8.0079C2.29047 8.23103 2.25 8.46249 2.25 8.7V15.3C2.25 15.5375 2.29047 15.769 2.38964 15.9921C2.48736 16.212 2.62539 16.3861 2.76967 16.5303L7.46967 21.2303C7.61395 21.3746 7.78802 21.5126 8.0079 21.6104C8.23103 21.7095 8.46249 21.75 8.7 21.75H15.3C15.5375 21.75 15.769 21.7095 15.9921 21.6104C16.212 21.5126 16.3861 21.3746 16.5303 21.2303L21.2303 16.5303C21.3746 16.3861 21.5126 16.212 21.6104 15.9921C21.7095 15.769 21.75 15.5375 21.75 15.3V8.7C21.75 8.46249 21.7095 8.23103 21.6104 8.0079C21.5126 7.78802 21.3746 7.61395 21.2303 7.46967L16.5303 2.76967C16.3861 2.62539 16.212 2.48736 15.9921 2.38964C15.769 2.29047 15.5375 2.25 15.3 2.25H8.7ZM12.75 8C12.75 7.58579 12.4142 7.25 12 7.25C11.5858 7.25 11.25 7.58579 11.25 8V12C11.25 12.4142 11.5858 12.75 12 12.75C12.4142 12.75 12.75 12.4142 12.75 12V8ZM12 15.25C11.5858 15.25 11.25 15.5858 11.25 16C11.25 16.4142 11.5858 16.75 12 16.75H12.01C12.4242 16.75 12.76 16.4142 12.76 16C12.76 15.5858 12.4242 15.25 12.01 15.25H12Z" })));
}
function WarningIcon() {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M11.9932 3C11.5018 3 11.0194 3.13134 10.596 3.38038C10.175 3.62805 9.82781 3.98314 9.59 4.40906L2.4909 16.6309C2.47341 16.661 2.45804 16.6923 2.44491 16.7246C2.27977 17.1303 2.21428 17.5695 2.25392 18.0056C2.29356 18.4416 2.43717 18.8619 2.67276 19.2313C2.90835 19.6008 3.22909 19.9086 3.6082 20.1291C3.98731 20.3496 4.41379 20.4764 4.85202 20.499C4.88374 20.5006 4.9151 20.5003 4.94598 20.498C4.96405 20.4993 4.98229 20.5 5.00069 20.5H19.0057L19.011 20.5C19.4598 20.4968 19.9011 20.3841 20.2962 20.1718C20.6914 19.9594 21.0285 19.6537 21.2781 19.2815C21.5277 18.9093 21.6822 18.4818 21.7282 18.0362C21.7742 17.5907 21.7102 17.1408 21.5419 16.7256C21.5287 16.693 21.5132 16.6613 21.4955 16.6309L14.3964 4.40904C14.1586 3.98312 13.8114 3.62805 13.3904 3.38038C12.9671 3.13134 12.4846 3 11.9932 3ZM12.7538 8.76945C12.7538 8.35599 12.4179 8.02081 12.0035 8.02081C11.5891 8.02081 11.2532 8.35599 11.2532 8.76945V12.7658C11.2532 13.1793 11.5891 13.5145 12.0035 13.5145C12.4179 13.5145 12.7538 13.1793 12.7538 12.7658V8.76945ZM12.7538 15.7586C12.7538 15.3451 12.4179 15.0099 12.0035 15.0099C11.5891 15.0099 11.2532 15.3451 11.2532 15.7586V15.7686C11.2532 16.182 11.5891 16.5172 12.0035 16.5172C12.4179 16.5172 12.7538 16.182 12.7538 15.7686V15.7586Z" })));
}

exports["default"] = Alert;
Object.keys(MuiAlert).forEach(function (k) {
	if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
		enumerable: true,
		get: function () { return MuiAlert[k]; }
	});
});
//# sourceMappingURL=index.js.map
