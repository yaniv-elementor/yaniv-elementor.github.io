import React, { useContext, useMemo } from 'react';
import MuiAccordion__default from '@mui/material/Accordion';
export * from '@mui/material/Accordion';
import MuiAccordionActions__default from '@mui/material/AccordionActions';
export * from '@mui/material/AccordionActions';
import MuiAccordionDetails__default from '@mui/material/AccordionDetails';
export * from '@mui/material/AccordionDetails';
import MuiAccordionSummary__default from '@mui/material/AccordionSummary';
export * from '@mui/material/AccordionSummary';
import MuiSvgIcon__default from '@mui/material/SvgIcon';
export * from '@mui/material/SvgIcon';
import MuiAlert__default from '@mui/material/Alert';
export * from '@mui/material/Alert';
import clsx from 'clsx';
import MuiIconButton__default from '@mui/material/IconButton';
export * from '@mui/material/IconButton';
import { createTheme, ThemeProvider as ThemeProvider$1, styled, useThemeProps, alpha, useTheme } from '@mui/material/styles';
export * from '@mui/material/styles';
import rtlPlugin from 'stylis-plugin-rtl';
import { CacheProvider } from '@emotion/react';
import createCache from '@emotion/cache';
import { prefixer } from 'stylis';
import useMediaQuery__default from '@mui/material/useMediaQuery';
export * from '@mui/material/useMediaQuery';
import MuiButton__default from '@mui/material/Button';
export * from '@mui/material/Button';
import MuiAlertTitle__default from '@mui/material/AlertTitle';
export * from '@mui/material/AlertTitle';
import MuiAppBar__default from '@mui/material/AppBar';
export * from '@mui/material/AppBar';
import MuiAutocomplete__default from '@mui/material/Autocomplete';
export * from '@mui/material/Autocomplete';
import MuiAvatar__default from '@mui/material/Avatar';
export * from '@mui/material/Avatar';
import MuiAvatarGroup__default from '@mui/material/AvatarGroup';
export * from '@mui/material/AvatarGroup';
import MuiBackdrop__default from '@mui/material/Backdrop';
export * from '@mui/material/Backdrop';
import MuiBadge__default from '@mui/material/Badge';
export * from '@mui/material/Badge';
import MuiBottomNavigation__default from '@mui/material/BottomNavigation';
export * from '@mui/material/BottomNavigation';
import MuiBottomNavigationAction__default from '@mui/material/BottomNavigationAction';
export * from '@mui/material/BottomNavigationAction';
import MuiBox__default from '@mui/material/Box';
export * from '@mui/material/Box';
import MuiBreadcrumbs__default from '@mui/material/Breadcrumbs';
export * from '@mui/material/Breadcrumbs';
import MuiButtonBase__default from '@mui/material/ButtonBase';
export * from '@mui/material/ButtonBase';
import MuiButtonGroup__default from '@mui/material/ButtonGroup';
export * from '@mui/material/ButtonGroup';
import MuiCard__default from '@mui/material/Card';
export * from '@mui/material/Card';
import MuiCardActionArea__default from '@mui/material/CardActionArea';
export * from '@mui/material/CardActionArea';
import MuiCardActions__default from '@mui/material/CardActions';
export * from '@mui/material/CardActions';
import MuiCardContent__default from '@mui/material/CardContent';
export * from '@mui/material/CardContent';
import MuiCardHeader__default from '@mui/material/CardHeader';
export * from '@mui/material/CardHeader';
import MuiCardMedia__default from '@mui/material/CardMedia';
export * from '@mui/material/CardMedia';
import MuiCheckbox__default from '@mui/material/Checkbox';
export * from '@mui/material/Checkbox';
import MuiChip__default from '@mui/material/Chip';
export * from '@mui/material/Chip';
import MuiCircularProgress__default from '@mui/material/CircularProgress';
export * from '@mui/material/CircularProgress';
import MuiClickAwayListener__default from '@mui/material/ClickAwayListener';
export * from '@mui/material/ClickAwayListener';
import MuiCollapse__default from '@mui/material/Collapse';
export * from '@mui/material/Collapse';
import MuiContainer__default from '@mui/material/Container';
export * from '@mui/material/Container';
import MuiCssBaseline__default from '@mui/material/CssBaseline';
export * from '@mui/material/CssBaseline';
import { DatePicker as DatePicker$1 } from '@mui/x-date-pickers/DatePicker';
import MuiInputAdornment__default from '@mui/material/InputAdornment';
export * from '@mui/material/InputAdornment';
import MuiTextField__default from '@mui/material/TextField';
export * from '@mui/material/TextField';
import MuiDialog__default from '@mui/material/Dialog';
export * from '@mui/material/Dialog';
import MuiDialogActions__default from '@mui/material/DialogActions';
export * from '@mui/material/DialogActions';
import MuiDialogContent__default from '@mui/material/DialogContent';
export * from '@mui/material/DialogContent';
import MuiDialogContentText__default from '@mui/material/DialogContentText';
export * from '@mui/material/DialogContentText';
import MuiToolbar__default from '@mui/material/Toolbar';
export * from '@mui/material/Toolbar';
import MuiStack__default from '@mui/material/Stack';
export * from '@mui/material/Stack';
import MuiDialogTitle__default from '@mui/material/DialogTitle';
export * from '@mui/material/DialogTitle';
import MuiDivider__default from '@mui/material/Divider';
export * from '@mui/material/Divider';
import MuiDrawer__default from '@mui/material/Drawer';
export * from '@mui/material/Drawer';
import MuiFab__default from '@mui/material/Fab';
export * from '@mui/material/Fab';
import MuiFade__default from '@mui/material/Fade';
export * from '@mui/material/Fade';
import MuiFilledInput__default from '@mui/material/FilledInput';
export * from '@mui/material/FilledInput';
import MuiFormControl__default from '@mui/material/FormControl';
export * from '@mui/material/FormControl';
import MuiFormControlLabel__default from '@mui/material/FormControlLabel';
export * from '@mui/material/FormControlLabel';
import MuiFormGroup__default from '@mui/material/FormGroup';
export * from '@mui/material/FormGroup';
import MuiFormHelperText__default from '@mui/material/FormHelperText';
export * from '@mui/material/FormHelperText';
import MuiFormLabel__default from '@mui/material/FormLabel';
export * from '@mui/material/FormLabel';
import MuiGrid__default from '@mui/material/Grid';
export * from '@mui/material/Grid';
import MuiGrow__default from '@mui/material/Grow';
export * from '@mui/material/Grow';
import MuiIcon__default from '@mui/material/Icon';
export * from '@mui/material/Icon';
import MuiImageList__default from '@mui/material/ImageList';
export * from '@mui/material/ImageList';
import MuiImageListItem__default from '@mui/material/ImageListItem';
export * from '@mui/material/ImageListItem';
import MuiImageListItemBar__default from '@mui/material/ImageListItemBar';
export * from '@mui/material/ImageListItemBar';
import MuiInput__default from '@mui/material/Input';
export * from '@mui/material/Input';
import MuiInputBase__default from '@mui/material/InputBase';
export * from '@mui/material/InputBase';
import MuiInputLabel__default from '@mui/material/InputLabel';
export * from '@mui/material/InputLabel';
import MuiLinearProgress__default from '@mui/material/LinearProgress';
export * from '@mui/material/LinearProgress';
import MuiLink__default from '@mui/material/Link';
export * from '@mui/material/Link';
import MuiList__default from '@mui/material/List';
export * from '@mui/material/List';
import MuiListItem__default from '@mui/material/ListItem';
export * from '@mui/material/ListItem';
import MuiListItemAvatar__default from '@mui/material/ListItemAvatar';
export * from '@mui/material/ListItemAvatar';
import MuiListItemButton__default from '@mui/material/ListItemButton';
export * from '@mui/material/ListItemButton';
import MuiListItemIcon__default from '@mui/material/ListItemIcon';
export * from '@mui/material/ListItemIcon';
import MuiListItemSecondaryAction__default from '@mui/material/ListItemSecondaryAction';
export * from '@mui/material/ListItemSecondaryAction';
import MuiListItemText__default from '@mui/material/ListItemText';
export * from '@mui/material/ListItemText';
import MuiListSubheader__default from '@mui/material/ListSubheader';
export * from '@mui/material/ListSubheader';
import { LocalizationProvider as LocalizationProvider$1 } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import MuiMenu__default from '@mui/material/Menu';
export * from '@mui/material/Menu';
import MuiMenuItem__default from '@mui/material/MenuItem';
export * from '@mui/material/MenuItem';
import MuiMenuList__default from '@mui/material/MenuList';
export * from '@mui/material/MenuList';
import MuiMobileStepper__default from '@mui/material/MobileStepper';
export * from '@mui/material/MobileStepper';
import MuiModal__default from '@mui/material/Modal';
export * from '@mui/material/Modal';
import MuiNativeSelect__default from '@mui/material/NativeSelect';
export * from '@mui/material/NativeSelect';
import MuiOutlinedInput__default from '@mui/material/OutlinedInput';
export * from '@mui/material/OutlinedInput';
import MuiPagination__default from '@mui/material/Pagination';
export * from '@mui/material/Pagination';
import MuiPaginationItem__default from '@mui/material/PaginationItem';
export * from '@mui/material/PaginationItem';
import MuiPaper__default from '@mui/material/Paper';
export * from '@mui/material/Paper';
import MuiPopover__default from '@mui/material/Popover';
export * from '@mui/material/Popover';
import MuiPopper__default from '@mui/material/Popper';
export * from '@mui/material/Popper';
import MuiPortal__default from '@mui/material/Portal';
export * from '@mui/material/Portal';
import MuiRadio__default from '@mui/material/Radio';
export * from '@mui/material/Radio';
import MuiRadioGroup__default from '@mui/material/RadioGroup';
export * from '@mui/material/RadioGroup';
import MuiRating__default from '@mui/material/Rating';
export * from '@mui/material/Rating';
import MuiScopedCssBaseline__default from '@mui/material/ScopedCssBaseline';
export * from '@mui/material/ScopedCssBaseline';
import MuiSelect__default from '@mui/material/Select';
export * from '@mui/material/Select';
import MuiSkeleton__default from '@mui/material/Skeleton';
export * from '@mui/material/Skeleton';
import MuiSlide__default from '@mui/material/Slide';
export * from '@mui/material/Slide';
import MuiSlider__default from '@mui/material/Slider';
export * from '@mui/material/Slider';
import MuiSnackbar__default from '@mui/material/Snackbar';
export * from '@mui/material/Snackbar';
import MuiSnackbarContent__default from '@mui/material/SnackbarContent';
export * from '@mui/material/SnackbarContent';
import MuiSpeedDial__default from '@mui/material/SpeedDial';
export * from '@mui/material/SpeedDial';
import MuiSpeedDialAction__default from '@mui/material/SpeedDialAction';
export * from '@mui/material/SpeedDialAction';
import MuiSpeedDialIcon__default from '@mui/material/SpeedDialIcon';
export * from '@mui/material/SpeedDialIcon';
import MuiStep__default from '@mui/material/Step';
export * from '@mui/material/Step';
import MuiStepButton__default from '@mui/material/StepButton';
export * from '@mui/material/StepButton';
import MuiStepConnector__default from '@mui/material/StepConnector';
export * from '@mui/material/StepConnector';
import MuiStepContent__default from '@mui/material/StepContent';
export * from '@mui/material/StepContent';
import MuiStepIcon__default from '@mui/material/StepIcon';
export * from '@mui/material/StepIcon';
import MuiStepLabel__default from '@mui/material/StepLabel';
export * from '@mui/material/StepLabel';
import MuiStepper__default from '@mui/material/Stepper';
export * from '@mui/material/Stepper';
import MuiSwipeableDrawer__default from '@mui/material/SwipeableDrawer';
export * from '@mui/material/SwipeableDrawer';
import MuiSwitch__default from '@mui/material/Switch';
export * from '@mui/material/Switch';
import MuiTab__default from '@mui/material/Tab';
export * from '@mui/material/Tab';
import MuiTabScrollButton__default from '@mui/material/TabScrollButton';
export * from '@mui/material/TabScrollButton';
import MuiTable__default from '@mui/material/Table';
export * from '@mui/material/Table';
import MuiTableBody__default from '@mui/material/TableBody';
export * from '@mui/material/TableBody';
import MuiTableCell__default from '@mui/material/TableCell';
export * from '@mui/material/TableCell';
import MuiTableContainer__default from '@mui/material/TableContainer';
export * from '@mui/material/TableContainer';
import MuiTableFooter__default from '@mui/material/TableFooter';
export * from '@mui/material/TableFooter';
import MuiTableHead__default from '@mui/material/TableHead';
export * from '@mui/material/TableHead';
import MuiTablePagination__default from '@mui/material/TablePagination';
export * from '@mui/material/TablePagination';
import MuiTableRow__default from '@mui/material/TableRow';
export * from '@mui/material/TableRow';
import MuiTableSortLabel__default from '@mui/material/TableSortLabel';
export * from '@mui/material/TableSortLabel';
import MuiTabs__default from '@mui/material/Tabs';
export * from '@mui/material/Tabs';
import MuiTextareaAutosize__default from '@mui/material/TextareaAutosize';
export * from '@mui/material/TextareaAutosize';
import { TimePicker as TimePicker$1 } from '@mui/x-date-pickers/TimePicker';
import MuiToggleButton__default from '@mui/material/ToggleButton';
export * from '@mui/material/ToggleButton';
import MuiToggleButtonGroup__default from '@mui/material/ToggleButtonGroup';
export * from '@mui/material/ToggleButtonGroup';
import MuiTooltip__default from '@mui/material/Tooltip';
export * from '@mui/material/Tooltip';
import MuiTypography__default from '@mui/material/Typography';
export * from '@mui/material/Typography';
import MuiZoom__default from '@mui/material/Zoom';
export * from '@mui/material/Zoom';
export * from 'material-ui-popup-state/hooks';
export { usePopupState } from 'material-ui-popup-state/hooks';

// Modified reason: modifying the default props.
const Accordion = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAccordion__default, { ...props, ref: ref }));
});
Accordion.defaultProps = {
    variant: 'outlined',
};

const AccordionActions = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAccordionActions__default, { ...props, ref: ref }));
});

const AccordionDetails = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAccordionDetails__default, { ...props, ref: ref }));
});

const SvgIcon = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSvgIcon__default, { ...props, ref: ref }));
});

const ArrowDropDownIcon$1 = React.forwardRef((props, ref) => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M17.2929 9.29289C17.6834 8.90237 18.3166 8.90237 18.7071 9.29289C19.0976 9.68342 19.0976 10.3166 18.7071 10.7071L12.7071 16.7071C12.3166 17.0976 11.6834 17.0976 11.2929 16.7071L5.29289 10.7071C4.90237 10.3166 4.90237 9.68342 5.29289 9.29289C5.68342 8.90237 6.31658 8.90237 6.70711 9.29289L12 14.5858L17.2929 9.29289Z" })));
});
// Modified reason: modifying the default props.
const AccordionSummary = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAccordionSummary__default, { ...props, ref: ref }));
});
AccordionSummary.defaultProps = {
    expandIcon: React.createElement(ArrowDropDownIcon$1, null),
};

// Modified reason: Material UI Typescript problem with the 'component' prop.
const IconButton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiIconButton__default, { ...props, ref: ref }));
});

/**
 * Do not edit directly
 * Generated on Wed, 10 Jan 2024 15:06:56 GMT
 */
const ColorCommonBlack = "#000000";
const ColorCommonWhite = "#ffffff";
const ColorGrey50 = "#f1f3f3";
const ColorGrey100 = "#d5d8dc";
const ColorGrey200 = "#babfc5";
const ColorGrey300 = "#9da5ae";
const ColorGrey400 = "#818a96";
const ColorGrey500 = "#69727d";
const ColorGrey600 = "#515962";
const ColorGrey700 = "#3f444b";
const ColorGrey800 = "#1f2124";
const ColorGrey900 = "#0c0d0e";
const ColorPink200 = "#f3bafd";
const ColorPink300 = "#f0abfc";
const ColorPink400 = "#eb8efb";
const ColorRed500 = "#ef4444";
const ColorRed600 = "#dc2626";
const ColorRed700 = "#b91c1c";
const ColorYellow400 = "#fbbf24";
const ColorYellow500 = "#f59e0b";
const ColorYellow600 = "#d97706";
const ColorYellow700 = "#bb5b1d";
const ColorYellow800 = "#b15211";
const ColorBlue500 = "#3b82f6";
const ColorBlue600 = "#2563eb";
const ColorBlue700 = "#1d4ed8";
const ColorGreen500 = "#10b981";
const ColorGreen600 = "#0a875a";
const ColorGreen700 = "#047857";
const ColorCyan300 = "#99f6e4";
const ColorCyan400 = "#5eead4";
const ColorCyan500 = "#2adfcd";
const ColorBurgundy700 = "#b51243";
const ColorBurgundy800 = "#93003f";
const ColorBurgundy900 = "#7e013b";

const MuiAccordion = {
    styleOverrides: {
        root: ({ theme }) => ({
            backgroundColor: theme.palette.background.default,
            '&:before': {
                // The accordion has an upper divider by default, which is not needed.
                content: 'none',
            },
            '&.Mui-expanded': {
                margin: 0,
            },
            '&.MuiAccordion-gutters + .MuiAccordion-root.MuiAccordion-gutters': {
                marginTop: theme.spacing(1),
                marginBottom: theme.spacing(0),
            },
            '&:not(.MuiAccordion-gutters) + .MuiAccordion-root:not(.MuiAccordion-gutters)': {
                borderTop: 0,
            },
            '&.Mui-disabled': {
                backgroundColor: theme.palette.background.default,
            },
        }),
    },
};

const MuiAccordionActions = {
    styleOverrides: {
        root: ({ theme }) => ({
            padding: theme.spacing(2),
        }),
    },
};

const MuiAccordionSummary = {
    styleOverrides: {
        root: () => ({
            // Matching the default minHeight of .MuiAccordionSummary.Mui-expanded
            minHeight: '64px',
        }),
        content: ({ theme }) => ({
            margin: theme.spacing(1, 0),
            '&.MuiAccordionSummary-content.Mui-expanded': {
                margin: theme.spacing(1, 0),
            },
        }),
    },
};

const MuiAppBar = {
    defaultProps: {
        elevation: 0,
        color: 'default',
    },
};

const MuiAutocomplete = {
    defaultProps: {
        slotProps: {
            paper: {
                elevation: 6,
            },
        },
    },
};

const MuiButton = {
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            whiteSpace: 'nowrap',
            '&:hover': {
                boxShadow: 'none',
            },
            '& .MuiSvgIcon-root': {
                fill: 'currentColor',
            },
        }),
    },
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '&:hover': {
                    borderColor: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'primary', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '&:hover': {
                    borderColor: '#17929B',
                },
            }),
        },
        {
            props: { color: 'global', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
    ],
};

const MuiButtonBase = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            '&.MuiButtonBase-root.Mui-focusVisible': {
                // Temp customization for accessibility (using 'border' because 'outline' is not working properly in Tabs).
                boxShadow: '0 0 0 1px inset',
            },
            // The CircularProgress component used as a loader of the buttons.
            '.MuiCircularProgress-root': {
                fontSize: 'inherit',
            },
        }),
    },
};

const themePaletteSemanticColors = [
    'primary',
    'secondary',
    'error',
    'warning',
    'info',
    'success',
    'accent',
    'global',
    'promotion',
];
const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';

const MuiButtonGroup = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            '&:hover': {
                boxShadow: 'none',
            },
        }),
    },
    variants: themePaletteSemanticColors.map((color) => ({
        props: { variant: 'contained', color },
        // Fixing a Material UI bug when one of the group children is wrapped with another element (e.g. a tooltip).
        style: ({ theme }) => {
            return {
                // Removing the border of the grouped buttons for supporting additional children types.
                '& .MuiButtonGroup-grouped:not(:last-of-type), & .MuiButtonGroup-grouped:not(:last-of-type).Mui-disabled': {
                    borderRight: 0,
                },
                // Supporting additional children types, when a button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child), & > *:not(:last-child) .MuiButtonGroup-grouped': {
                    borderRight: `1px solid ${theme.palette[color].dark}`,
                },
                // Supporting additional children types, when a disabled button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child).Mui-disabled, & > *:not(:last-child) .MuiButtonGroup-grouped.Mui-disabled': {
                    borderRight: `1px solid ${theme.palette.action.disabled}`,
                },
            };
        },
    })),
};

const MuiChip = {
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '& .MuiChip-deleteIcon': {
                    color: '#D355CE',
                    '&:hover': {
                        color: '#C00BB9',
                    },
                },
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '& .MuiChip-deleteIcon': {
                    color: '#5DB3B9',
                    '&:hover': {
                        color: '#17929B',
                    },
                },
            }),
        },
    ],
};

const MuiCircularProgress = {
    defaultProps: {
        color: 'inherit',
        /**
         * Customizing to 1em for easy customization by other components that wrap the CircularProgress.
         * Setting the default size value in the styleOverrides fontSize property.
         */
        size: '1em',
    },
    styleOverrides: {
        root: ({ theme }) => ({
            // Temporarily reading the value from the spacing, until we'll find a better solution.
            fontSize: theme.spacing(5),
        }),
    },
};

const MuiDialogContent = {
    styleOverrides: {
        dividers: () => ({
            '&:last-child': {
                // Fixing Material UI bug - when the divider is the last child it should not be shown.
                borderBottom: 'none',
            },
        }),
    },
};

const MuiDialogTitle = {
    styleOverrides: {
        root: ({ theme }) => ({
            fontWeight: theme.typography.fontWeightBold,
        }),
    },
};

const MuiFormHelperText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.tertiary,
            margin: theme.spacing(0.5, 0, 0),
        }),
    },
};

const MuiIconButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
        {
            props: { edge: 'start', size: 'small' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'end', size: 'small' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'start', size: 'large' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-2),
            }),
        },
        {
            props: { edge: 'end', size: 'large' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-2),
            }),
        },
    ],
};

const MuiInputBase = {
    styleOverrides: {
        input: () => ({
            // Setting the background color to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
            },
        }),
    },
};

const MuiListItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemButton = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
        }),
    },
};

// TODO: update the relevant components when the paper background image is changed.
const PAPER_BACKGROUND_IMAGE = 'linear-gradient(rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12))';
/**
 * The purpose of this empty configuration object is to make sure that all components that uses the PAPER_BACKGROUND_IMAGE const,
 * Should also be adjusted if the paper background image is changed.
 */
const MuiPaper = {};

const MuiListSubheader = {
    styleOverrides: {
        root: ({ theme }) => ({
            // The background color should be the same as the drop-downs background color.
            backgroundImage: PAPER_BACKGROUND_IMAGE,
            // Temp value until there will be a token in the design system.
            lineHeight: '36px',
            color: theme.palette.text.tertiary,
            fontSize: theme.typography.caption.fontSize,
            fontWeight: theme.typography.caption.fontWeight,
            fontFamily: theme.typography.caption.fontFamily,
            letterSpacing: theme.typography.caption.letterSpacing,
        }),
    },
};

const MuiMenu = {
    defaultProps: {
        elevation: 6,
    },
};

const MuiMenuItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiSelect = {
    styleOverrides: {
        nativeInput: () => ({
            // Setting the background color and opacity to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
                opacity: 0,
            },
        }),
    },
};

const MuiStepIcon = {
    styleOverrides: {
        root: ({ theme }) => ({
            '&:not(.Mui-active) .MuiStepIcon-text': {
                fill: theme.palette.common.white,
            },
        }),
    },
};

const MuiStepLabel = {
    styleOverrides: {
        root: () => ({
            alignItems: 'flex-start',
        }),
    },
};

const MuiStepper = {
    styleOverrides: {
        root: () => ({
            '& .MuiStepLabel-root': {
                alignItems: 'center',
            },
        }),
    },
};

const MuiToggleButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#17929B',
                },
            }),
        },
    ],
};

const MuiTooltip = {
    defaultProps: {
        arrow: true,
    },
};

var components = {
    MuiAccordion,
    MuiAccordionActions,
    MuiAccordionSummary,
    MuiAppBar,
    MuiAutocomplete,
    MuiButton,
    MuiButtonBase,
    MuiButtonGroup,
    MuiChip,
    MuiCircularProgress,
    MuiDialogContent,
    MuiDialogTitle,
    MuiFormHelperText,
    MuiIconButton,
    MuiInputBase,
    MuiListItem,
    MuiListItemButton,
    MuiListItemText,
    MuiListSubheader,
    MuiMenu,
    MuiMenuItem,
    MuiPaper,
    MuiSelect,
    MuiStepIcon,
    MuiStepLabel,
    MuiStepper,
    MuiToggleButton,
    MuiTooltip,
};

const themeBaseConfig = {
    components,
    typography: {
        button: {
            textTransform: 'none',
        },
        subtitle1: {
            lineHeight: 1.3,
        },
        subtitle2: {
            lineHeight: 1.3,
        },
    },
};

const lightTheme = createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'light',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey600,
            light: ColorGrey500,
            dark: ColorGrey700,
            contrastText: ColorCommonWhite,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorGrey900,
            secondary: ColorGrey700,
            tertiary: ColorGrey500,
            disabled: ColorGrey300,
        },
        background: {
            paper: ColorCommonWhite,
            default: ColorCommonWhite,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow700,
            light: ColorYellow600,
            dark: ColorYellow800,
            contrastText: ColorCommonWhite,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

const darkTheme = createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'dark',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey300,
            light: ColorGrey200,
            dark: ColorGrey400,
            contrastText: ColorGrey900,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorCommonWhite,
            secondary: ColorGrey200,
            tertiary: ColorGrey300,
            disabled: ColorGrey600,
        },
        background: {
            paper: ColorGrey900,
            default: ColorGrey800,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow500,
            light: ColorYellow400,
            dark: ColorYellow800,
            contrastText: ColorCommonBlack,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

const DirectionContext = React.createContext(false);
/**
 * @see https://mui.com/material-ui/guides/right-to-left/
 */
const cacheRtl = createCache({
    // Define class names prefix.
    key: 'eui-rtl',
    stylisPlugins: [prefixer, rtlPlugin],
});
const DirectionCacheProvider = (props) => {
    if (!props.isRTL) {
        return React.createElement(React.Fragment, null, props.children);
    }
    return React.createElement(CacheProvider, { value: cacheRtl }, props.children);
};
const DirectionProvider = (props) => {
    const isRTL = !!props.rtl;
    return (React.createElement(DirectionContext.Provider, { value: isRTL },
        React.createElement(DirectionCacheProvider, { isRTL: isRTL }, props.children)));
};

const ThemeProvider = ({ colorScheme = 'auto', children }) => {
    const rtl = useContext(DirectionContext);
    const prefersDarkMode = useMediaQuery__default('(prefers-color-scheme: dark)');
    const theme = useMemo(() => {
        const themeData = ((colorScheme === 'auto' && prefersDarkMode) || colorScheme === 'dark') ? darkTheme : lightTheme;
        if (rtl) {
            return createTheme(themeData, { direction: 'rtl' });
        }
        return themeData;
    }, [rtl, colorScheme, prefersDarkMode]);
    return (React.createElement(ThemeProvider$1, { theme: theme }, children));
};

const createSlots = (componentName, componentSlots) => {
    const slots = {};
    const classNames = {};
    componentSlots.forEach((slot) => {
        classNames[slot] = `Mui${componentName}-${slot}`;
        slots[slot] = {
            slot,
            name: `Mui${componentName}`,
        };
    });
    return {
        slots,
        classNames,
    };
};

// Must have a default export to match all other components structure, for the global index.js to work.
var index = {};

const XIcon = React.forwardRef((props, ref) => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18.5303 5.46967C18.8232 5.76256 18.8232 6.23744 18.5303 6.53033L6.53033 18.5303C6.23744 18.8232 5.76256 18.8232 5.46967 18.5303C5.17678 18.2374 5.17678 17.7626 5.46967 17.4697L17.4697 5.46967C17.7626 5.17678 18.2374 5.17678 18.5303 5.46967Z" }),
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.46967 5.46967C5.76256 5.17678 6.23744 5.17678 6.53033 5.46967L18.5303 17.4697C18.8232 17.7626 18.8232 18.2374 18.5303 18.5303C18.2374 18.8232 17.7626 18.8232 17.4697 18.5303L5.46967 6.53033C5.17678 6.23744 5.17678 5.76256 5.46967 5.46967Z" })));
});
const { slots: slots$5, classNames: classNames$5 } = createSlots('CloseButton', ['root', 'icon']);
const Root$4 = styled(IconButton, slots$5.root)({});
const Icon$1 = styled(XIcon, slots$5.icon)({});
const CloseButton = React.forwardRef((inProps, ref) => {
    const props = useThemeProps({ props: inProps, name: slots$5.root.name });
    const { slotProps = {}, ...rootProps } = props;
    return (React.createElement(Root$4, { ...rootProps, size: "small", ref: ref, className: clsx([[classNames$5.root, rootProps.className]]), ownerState: props },
        React.createElement(Icon$1, { ...slotProps.icon, className: clsx([classNames$5.icon, slotProps.icon?.className]), ownerState: props })));
});
CloseButton.defaultProps = {
    'aria-label': 'close',
    color: 'default',
};

const StyledAlert = styled(MuiAlert__default)(({ theme, severity, color, variant }) => {
    const variantsStyle = getVariantsStyle(severity, color, variant, theme);
    return {
        padding: theme.spacing(1.5, 2),
        '& .MuiAlert-message': {
            width: '100%',
            padding: 0,
            minHeight: '30.75px',
            display: 'flex',
            flexDirection: 'row',
            flexWrap: 'wrap',
            gap: theme.spacing(1.5),
        },
        '& .MuiAlertTitle-root': {
            marginBottom: 0,
            lineHeight: 'inherit',
            marginRight: theme.spacing(0.5),
            ...theme.typography.subtitle2,
            marginTop: 0,
        },
        '& .MuiAlert-icon': {
            padding: 0,
            paddingTop: theme.spacing(0.5),
        },
        '& .MuiAlert-action': {
            padding: 0,
            marginLeft: theme.spacing(1),
        },
        '&.MuiAlert-filledWarning': {
            color: theme.palette.common.white,
        },
        ...variantsStyle,
    };
});
const { slots: slots$4, classNames: classNames$4 } = createSlots('Alert', ['actions', 'content']);
const StyledAlertContent = styled('div', slots$4.content)(() => ({
    flexGrow: 1,
    paddingTop: '6px',
}));
const StyledAlertContentInnerContainer = styled('div', slots$4.content)(({ theme }) => ({
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap',
    gap: theme.spacing(0.25),
    maxWidth: '800px',
}));
const AlertContent = ({ children, ...props }) => {
    return (React.createElement(StyledAlertContent, { ...props },
        React.createElement(StyledAlertContentInnerContainer, null, children)));
};
const StyledAlertActions = styled('div')(({ theme }) => ({
    display: 'flex',
    alignItems: 'flex-start',
    flexWrap: 'wrap',
    gap: theme.spacing(1),
}));
// Modified reason: Allowing multiple actions with responsive layout.
const Alert = React.forwardRef(({ onClose, action, secondaryAction, children, ...props }, ref) => {
    const hasActions = Boolean(action || secondaryAction);
    return (React.createElement(StyledAlert, { iconMapping: {
            success: React.createElement(SuccessIcon, null),
            error: React.createElement(ErrorIcon, null),
            info: React.createElement(InfoIcon, null),
            warning: React.createElement(WarningIcon, null),
        }, ...props, ref: ref, action: onClose
            ? (React.createElement(CloseButton, { color: "inherit", onClick: onClose, slotProps: {
                    icon: {
                        fontSize: 'small',
                    },
                }, title: props.closeText, "aria-label": props.closeText }))
            : false },
        React.createElement(AlertContent, { className: classNames$4.content }, children),
        hasActions && (React.createElement(StyledAlertActions, { className: classNames$4.actions },
            secondaryAction,
            action))));
});
Alert.defaultProps = {
    closeText: 'Close',
    severity: 'success',
};
function getVariantsStyle(severity, color, variant, theme) {
    // In Mui, the color prop has a higher priority than the severity prop.
    const semanticColor = color || severity;
    if (!semanticColor) {
        return {};
    }
    if (variant === 'filled') {
        return {
            '& .MuiButton-containedInherit': {
                color: theme.palette[semanticColor].main,
                backgroundColor: 'rgba(255, 255, 255, 1)',
                '&:hover': {
                    backgroundColor: 'rgba(255, 255, 255, .96)',
                },
            },
            '& .MuiButton-outlinedInherit:hover': {
                backgroundColor: theme.palette[semanticColor].dark,
            },
            // Setting the pseudo-classes color to prevent the override of global CSS with higher specificity than the Button component.
            '& a.MuiButtonBase-root.MuiButton-containedInherit': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette[semanticColor].main,
                },
            },
        };
    }
    return {
        '&.MuiAlert-root': {
            color: theme.palette.text.secondary,
        },
        '& .MuiCloseButton-root': {
            color: theme.palette.action.active,
        },
        '& .MuiButton-containedInherit': {
            color: theme.palette[semanticColor].contrastText,
            backgroundColor: theme.palette[semanticColor].main,
            '&:hover': {
                backgroundColor: theme.palette[semanticColor].dark,
            },
        },
        '& .MuiButton-outlinedInherit': {
            borderColor: theme.palette[semanticColor].main,
            color: theme.palette[semanticColor].main,
            '&:hover': {
                backgroundColor: alpha(theme.palette[semanticColor].main, 0.08),
            },
        },
        // Setting the pseudo-classes color to prevent the override of global CSS with higher specificity than the Button component.
        '& a.MuiButtonBase-root.MuiButton-containedInherit': {
            [LINK_PSEUDO_SELECTORS]: {
                color: theme.palette[semanticColor].contrastText,
            },
        },
        '& a.MuiButtonBase-root.MuiButton-outlinedInherit': {
            [LINK_PSEUDO_SELECTORS]: {
                color: theme.palette[semanticColor].main,
            },
        },
    };
}
function SuccessIcon() {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2.25C10.7196 2.25 9.45176 2.50219 8.26884 2.99217C7.08591 3.48216 6.01108 4.20034 5.10571 5.10571C4.20034 6.01108 3.48216 7.08591 2.99217 8.26884C2.50219 9.45176 2.25 10.7196 2.25 12C2.25 13.2804 2.50219 14.5482 2.99217 15.7312C3.48216 16.9141 4.20034 17.9889 5.10571 18.8943C6.01108 19.7997 7.08591 20.5178 8.26884 21.0078C9.45176 21.4978 10.7196 21.75 12 21.75C13.2804 21.75 14.5482 21.4978 15.7312 21.0078C16.9141 20.5178 17.9889 19.7997 18.8943 18.8943C19.7997 17.9889 20.5178 16.9141 21.0078 15.7312C21.4978 14.5482 21.75 13.2804 21.75 12C21.75 10.7196 21.4978 9.45176 21.0078 8.26884C20.5178 7.08591 19.7997 6.01108 18.8943 5.10571C17.9889 4.20034 16.9141 3.48216 15.7312 2.99217C14.5482 2.50219 13.2804 2.25 12 2.25ZM16.2415 10.0563C16.5344 9.76339 16.5344 9.28852 16.2415 8.99563C15.9486 8.70273 15.4737 8.70273 15.1809 8.99563L10.7631 13.4134L8.81939 11.4697C8.5265 11.1768 8.05163 11.1768 7.75873 11.4697C7.46584 11.7626 7.46584 12.2374 7.75873 12.5303L10.2328 15.0044C10.3734 15.145 10.5642 15.224 10.7631 15.224C10.962 15.224 11.1528 15.145 11.2934 15.0044L16.2415 10.0563Z" })));
}
function InfoIcon() {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2.25 11.75C2.25 6.36522 6.61522 2 12 2C17.3848 2 21.75 6.36522 21.75 11.75C21.75 17.1348 17.3848 21.5 12 21.5C6.61522 21.5 2.25 17.1348 2.25 11.75ZM11.25 7.75C11.25 7.33579 11.5858 7 12 7H12.01C12.4242 7 12.76 7.33579 12.76 7.75C12.76 8.16421 12.4242 8.5 12.01 8.5H12C11.5858 8.5 11.25 8.16421 11.25 7.75ZM10.25 11.75C10.25 11.3358 10.5858 11 11 11H12C12.4142 11 12.75 11.3358 12.75 11.75V15H13C13.4142 15 13.75 15.3358 13.75 15.75C13.75 16.1642 13.4142 16.5 13 16.5H12C11.5858 16.5 11.25 16.1642 11.25 15.75V12.5H11C10.5858 12.5 10.25 12.1642 10.25 11.75Z" })));
}
function ErrorIcon() {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.7 2.25C8.46249 2.25 8.23103 2.29047 8.0079 2.38964C7.78802 2.48736 7.61395 2.62539 7.46967 2.76967L2.76967 7.46967C2.62539 7.61395 2.48736 7.78802 2.38964 8.0079C2.29047 8.23103 2.25 8.46249 2.25 8.7V15.3C2.25 15.5375 2.29047 15.769 2.38964 15.9921C2.48736 16.212 2.62539 16.3861 2.76967 16.5303L7.46967 21.2303C7.61395 21.3746 7.78802 21.5126 8.0079 21.6104C8.23103 21.7095 8.46249 21.75 8.7 21.75H15.3C15.5375 21.75 15.769 21.7095 15.9921 21.6104C16.212 21.5126 16.3861 21.3746 16.5303 21.2303L21.2303 16.5303C21.3746 16.3861 21.5126 16.212 21.6104 15.9921C21.7095 15.769 21.75 15.5375 21.75 15.3V8.7C21.75 8.46249 21.7095 8.23103 21.6104 8.0079C21.5126 7.78802 21.3746 7.61395 21.2303 7.46967L16.5303 2.76967C16.3861 2.62539 16.212 2.48736 15.9921 2.38964C15.769 2.29047 15.5375 2.25 15.3 2.25H8.7ZM12.75 8C12.75 7.58579 12.4142 7.25 12 7.25C11.5858 7.25 11.25 7.58579 11.25 8V12C11.25 12.4142 11.5858 12.75 12 12.75C12.4142 12.75 12.75 12.4142 12.75 12V8ZM12 15.25C11.5858 15.25 11.25 15.5858 11.25 16C11.25 16.4142 11.5858 16.75 12 16.75H12.01C12.4242 16.75 12.76 16.4142 12.76 16C12.76 15.5858 12.4242 15.25 12.01 15.25H12Z" })));
}
function WarningIcon() {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", fontSize: "inherit" },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M11.9932 3C11.5018 3 11.0194 3.13134 10.596 3.38038C10.175 3.62805 9.82781 3.98314 9.59 4.40906L2.4909 16.6309C2.47341 16.661 2.45804 16.6923 2.44491 16.7246C2.27977 17.1303 2.21428 17.5695 2.25392 18.0056C2.29356 18.4416 2.43717 18.8619 2.67276 19.2313C2.90835 19.6008 3.22909 19.9086 3.6082 20.1291C3.98731 20.3496 4.41379 20.4764 4.85202 20.499C4.88374 20.5006 4.9151 20.5003 4.94598 20.498C4.96405 20.4993 4.98229 20.5 5.00069 20.5H19.0057L19.011 20.5C19.4598 20.4968 19.9011 20.3841 20.2962 20.1718C20.6914 19.9594 21.0285 19.6537 21.2781 19.2815C21.5277 18.9093 21.6822 18.4818 21.7282 18.0362C21.7742 17.5907 21.7102 17.1408 21.5419 16.7256C21.5287 16.693 21.5132 16.6613 21.4955 16.6309L14.3964 4.40904C14.1586 3.98312 13.8114 3.62805 13.3904 3.38038C12.9671 3.13134 12.4846 3 11.9932 3ZM12.7538 8.76945C12.7538 8.35599 12.4179 8.02081 12.0035 8.02081C11.5891 8.02081 11.2532 8.35599 11.2532 8.76945V12.7658C11.2532 13.1793 11.5891 13.5145 12.0035 13.5145C12.4179 13.5145 12.7538 13.1793 12.7538 12.7658V8.76945ZM12.7538 15.7586C12.7538 15.3451 12.4179 15.0099 12.0035 15.0099C11.5891 15.0099 11.2532 15.3451 11.2532 15.7586V15.7686C11.2532 16.182 11.5891 16.5172 12.0035 16.5172C12.4179 16.5172 12.7538 16.182 12.7538 15.7686V15.7586Z" })));
}

const hardCodedColor = {
    primary: '#C00BB9',
    global: '#17929B',
};
const getLinkTextColor = (color = 'primary', variant = 'text') => {
    if (!color) {
        return;
    }
    if (color === 'inherit') {
        return 'inherit';
    }
    if (variant === 'contained') {
        return `${color}.contrastText`;
    }
    if (color in hardCodedColor) {
        return hardCodedColor[color];
    }
    return `${color}.main`;
};
// Modified reason: Material UI Typescript problem with the 'component' prop and handling the link global style overrides.
const Button = React.forwardRef((props, ref) => {
    const { sx = {}, ...rootProps } = props;
    let linkSx = {};
    // Temporary solution to prevent global styles from affecting the link color.
    if (rootProps.href) {
        linkSx = {
            [LINK_PSEUDO_SELECTORS]: {
                color: getLinkTextColor(rootProps.color, rootProps.variant),
            },
        };
    }
    return (React.createElement(MuiButton__default, { ...props, sx: {
            ...linkSx,
            ...sx,
        }, ref: ref }));
});

const { slots: slots$3, classNames: classNames$3 } = createSlots('AlertAction', ['root']);
const Root$3 = styled(Button, slots$3.root)({});
const AlertAction = React.forwardRef((inProps, ref) => {
    const props = useThemeProps({ props: inProps, name: slots$3.root.name });
    return (React.createElement(Root$3, { ...props, size: "small", ref: ref, className: clsx([[classNames$3.root, props.className]]), ownerState: props }));
});
AlertAction.defaultProps = {
    color: 'inherit',
    variant: 'outlined',
};

const AlertTitle = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAlertTitle__default, { ...props, ref: ref }));
});

const AppBar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAppBar__default, { ...props, ref: ref }));
});

const Autocomplete = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAutocomplete__default, { ...props, ref: ref }));
});

const Avatar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAvatar__default, { ...props, ref: ref }));
});

const AvatarGroup = React.forwardRef((props, ref) => {
    return (React.createElement(MuiAvatarGroup__default, { ...props, ref: ref }));
});

const Backdrop = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBackdrop__default, { ...props, ref: ref }));
});

const Badge = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBadge__default, { ...props, ref: ref }));
});

const BottomNavigation = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBottomNavigation__default, { ...props, ref: ref }));
});

const BottomNavigationAction = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBottomNavigationAction__default, { ...props, ref: ref }));
});

const Box = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBox__default, { ...props, ref: ref }));
});

const Breadcrumbs = React.forwardRef((props, ref) => {
    return (React.createElement(MuiBreadcrumbs__default, { ...props, ref: ref }));
});

const ButtonBase = React.forwardRef((props, ref) => {
    return (React.createElement(MuiButtonBase__default, { ...props, ref: ref }));
});

const ButtonGroup = React.forwardRef((props, ref) => {
    return (React.createElement(MuiButtonGroup__default, { ...props, ref: ref }));
});

const Card = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCard__default, { ...props, ref: ref }));
});

const CardActionArea = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCardActionArea__default, { ...props, ref: ref }));
});

const CardActions = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCardActions__default, { ...props, ref: ref }));
});

const CardContent = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCardContent__default, { ...props, ref: ref }));
});

const CardHeader = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCardHeader__default, { ...props, ref: ref }));
});

const CardMedia = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCardMedia__default, { ...props, ref: ref }));
});

const Checkbox = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCheckbox__default, { ...props, ref: ref }));
});

const Chip = React.forwardRef((props, ref) => {
    return (React.createElement(MuiChip__default, { ...props, ref: ref }));
});

const CircularProgress = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCircularProgress__default, { ...props, ref: ref }));
});

const ClickAwayListener = React.forwardRef((props, ref) => {
    return (React.createElement(MuiClickAwayListener__default, { ...props, ref: ref }));
});

const Collapse = React.forwardRef((props, ref) => {
    return (React.createElement(MuiCollapse__default, { ...props, ref: ref }));
});

const Container = React.forwardRef((props, ref) => {
    return (React.createElement(MuiContainer__default, { ...props, ref: ref }));
});

const CssBaseline = (props) => (React.createElement(MuiCssBaseline__default, { ...props }));

const InputAdornment = React.forwardRef((props, ref) => {
    return (React.createElement(MuiInputAdornment__default, { ...props, ref: ref }));
});

const TextField = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTextField__default, { ...props, ref: ref }));
});

const CalendarIcon = React.forwardRef((props, ref) => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8 2.25C8.41421 2.25 8.75 2.58579 8.75 3V4.25H15.25V3C15.25 2.58579 15.5858 2.25 16 2.25C16.4142 2.25 16.75 2.58579 16.75 3V4.25H18C19.5188 4.25 20.75 5.48122 20.75 7V19C20.75 20.5188 19.5188 21.75 18 21.75H6C4.48122 21.75 3.25 20.5188 3.25 19V7C3.25 5.48122 4.48122 4.25 6 4.25H7.25V3C7.25 2.58579 7.58579 2.25 8 2.25ZM7.25 5.75H6C5.30964 5.75 4.75 6.30964 4.75 7V10.25H19.25V7C19.25 6.30964 18.6904 5.75 18 5.75H16.75V7C16.75 7.41421 16.4142 7.75 16 7.75C15.5858 7.75 15.25 7.41421 15.25 7V5.75H8.75V7C8.75 7.41421 8.41421 7.75 8 7.75C7.58579 7.75 7.25 7.41421 7.25 7V5.75ZM19.25 11.75H4.75V19C4.75 19.6904 5.30964 20.25 6 20.25H18C18.6904 20.25 19.25 19.6904 19.25 19V11.75Z" })));
});
const DatePicker = React.forwardRef(({ slots = {}, slotProps = {}, ...props }, ref) => {
    return (React.createElement(DatePicker$1, { ...props, ref: ref, slots: {
            clearButton: IconButton,
            inputAdornment: InputAdornment,
            nextIconButton: IconButton,
            openPickerButton: IconButton,
            openPickerIcon: CalendarIcon,
            previousIconButton: IconButton,
            switchViewButton: IconButton,
            textField: TextField,
            ...slots,
        }, slotProps: {
            layout: {
                sx: {
                    '& .MuiDayCalendar-root': {
                        // The calendar layout should always be aligned to the left.
                        direction: 'ltr /* @noflip */',
                    },
                    '& .MuiYearCalendar-root': {
                        // The year selection layout should always be aligned to the left.
                        direction: 'ltr /* @noflip */',
                    },
                },
            },
            ...slotProps,
        } }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const Dialog = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDialog__default, { ...props, ref: ref }));
});

const DialogActions = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDialogActions__default, { ...props, ref: ref }));
});

const DialogContent = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDialogContent__default, { ...props, ref: ref }));
});

const DialogContentText = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDialogContentText__default, { ...props, ref: ref }));
});

const Toolbar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiToolbar__default, { ...props, ref: ref }));
});

const Stack = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStack__default, { ...props, ref: ref }));
});

const ElementorLogo = (props) => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 32 32", ...props },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2.69648 24.8891C0.938383 22.2579 0 19.1645 0 16C0 11.7566 1.68571 7.68687 4.68629 4.68629C7.68687 1.68571 11.7566 0 16 0C19.1645 0 22.2579 0.938383 24.8891 2.69648C27.5203 4.45459 29.5711 6.95344 30.7821 9.87706C31.9931 12.8007 32.3099 16.0177 31.6926 19.1214C31.0752 22.2251 29.5514 25.0761 27.3137 27.3137C25.0761 29.5514 22.2251 31.0752 19.1214 31.6926C16.0177 32.3099 12.8007 31.9931 9.87706 30.7821C6.95344 29.5711 4.45459 27.5203 2.69648 24.8891ZM12.0006 9.33281H9.33437V22.6665H12.0006V9.33281ZM22.6657 9.33281H14.6669V11.9991H22.6657V9.33281ZM22.6657 14.6654H14.6669V17.3316H22.6657V14.6654ZM22.6657 20.0003H14.6669V22.6665H22.6657V20.0003Z" })));
};
const StyledElementorLogo = styled(ElementorLogo)(({ theme }) => ({
    width: theme.spacing(3),
    height: theme.spacing(3),
    '& path': {
        fill: theme.palette.text.primary,
    },
    marginRight: theme.spacing(1),
}));
const StyledCustomLogo = styled('span')(({ theme }) => ({
    marginRight: theme.spacing(1),
}));
const Logo = ({ logo, ...rest }) => {
    if (logo === false) {
        return null;
    }
    if (logo) {
        return React.createElement(StyledCustomLogo, null, logo);
    }
    return React.createElement(StyledElementorLogo, { ...rest });
};
const { slots: slots$2, classNames: classNames$2 } = createSlots('DialogHeader', ['root', 'logo', 'toolbar']);
const Root$2 = styled(AppBar, slots$2.root)({
    '& .MuiDialogTitle-root': {
        padding: 0,
    },
});
const ToolbarSlot = styled(Toolbar, slots$2.toolbar)({});
const DialogHeader = React.forwardRef((inProps, ref) => {
    const props = useThemeProps({ props: inProps, name: slots$2.root.name });
    const { slotProps = {}, logo, onClose, ...rootProps } = props;
    return (React.createElement(Root$2, { ...rootProps, ref: ref, className: clsx([[classNames$2.root, rootProps.className]]), ownerState: props },
        React.createElement(ToolbarSlot, { variant: "dense", ...slotProps.toolbar, className: clsx([classNames$2.toolbar, slotProps.toolbar?.className]), ownerState: props },
            React.createElement(Logo, { logo: logo, className: clsx([classNames$2.logo, slotProps.logo?.className]) }),
            React.createElement(Stack, { direction: "row", alignItems: "center", flex: 1 }, props.children),
            onClose && (React.createElement(CloseButton, { edge: "end", onClick: onClose, sx: { '&.MuiButtonBase-root': { ml: 0.5 } } })))));
});
DialogHeader.defaultProps = {
    color: 'transparent',
    position: 'relative',
};

const { slots: slots$1, classNames: classNames$1 } = createSlots('DialogHeaderGroup', ['root']);
const Root$1 = styled(Box, slots$1.root)(({ theme, ownerState }) => {
    const { disableSpacing, disableGutters, gutterLeftAuto, gutterRightAuto } = ownerState;
    return {
        display: 'flex',
        alignItems: 'center',
        gap: disableSpacing ? undefined : theme.spacing(1),
        '.MuiDialogHeaderGroup-root + &.MuiDialogHeaderGroup-root': (disableGutters || gutterLeftAuto) ? undefined : {
            marginLeft: theme.spacing(2),
        },
        marginLeft: gutterLeftAuto ? 'auto' : undefined,
        marginRight: gutterRightAuto ? 'auto' : undefined,
    };
});
const DialogHeaderGroup = React.forwardRef((inProps, ref) => {
    const props = useThemeProps({ props: inProps, name: slots$1.root.name });
    const { disableSpacing, disableGutters, gutterLeftAuto, gutterRightAuto, ...rootProps } = props;
    const ownerState = {
        disableSpacing,
        disableGutters,
        gutterLeftAuto,
        gutterRightAuto,
    };
    return (React.createElement(Root$1, { ...rootProps, ref: ref, className: clsx([[classNames$1.root, rootProps.className]]), ownerState: ownerState }));
});

// Modified reason: modifying the default props.
const DialogTitle = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDialogTitle__default, { ...props, ref: ref }));
});
DialogTitle.defaultProps = {
    variant: 'subtitle1',
};

const Divider = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDivider__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const Drawer = React.forwardRef((props, ref) => {
    return (React.createElement(MuiDrawer__default, { ...props, ref: ref }));
});

const Fab = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFab__default, { ...props, ref: ref }));
});

const Fade = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFade__default, { ...props, ref: ref }));
});

const FilledInput = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFilledInput__default, { ...props, ref: ref }));
});

const FormControl = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFormControl__default, { ...props, ref: ref }));
});

const FormControlLabel = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFormControlLabel__default, { ...props, ref: ref }));
});

const FormGroup = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFormGroup__default, { ...props, ref: ref }));
});

const FormHelperText = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFormHelperText__default, { ...props, ref: ref }));
});

const FormLabel = React.forwardRef((props, ref) => {
    return (React.createElement(MuiFormLabel__default, { ...props, ref: ref }));
});

const Grid = React.forwardRef((props, ref) => {
    return (React.createElement(MuiGrid__default, { ...props, ref: ref }));
});

const Grow = React.forwardRef((props, ref) => {
    return (React.createElement(MuiGrow__default, { ...props, ref: ref }));
});

const Icon = React.forwardRef((props, ref) => {
    return (React.createElement(MuiIcon__default, { ...props, ref: ref }));
});

const ImageList = React.forwardRef((props, ref) => {
    return (React.createElement(MuiImageList__default, { ...props, ref: ref }));
});

const ImageListItem = React.forwardRef((props, ref) => {
    return (React.createElement(MuiImageListItem__default, { ...props, ref: ref }));
});

const ImageListItemBar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiImageListItemBar__default, { ...props, ref: ref }));
});

const Input = React.forwardRef((props, ref) => {
    return (React.createElement(MuiInput__default, { ...props, ref: ref }));
});

const InputBase = React.forwardRef((props, ref) => {
    return (React.createElement(MuiInputBase__default, { ...props, ref: ref }));
});

const InputLabel = React.forwardRef((props, ref) => {
    return (React.createElement(MuiInputLabel__default, { ...props, ref: ref }));
});

const LinearProgress = React.forwardRef((props, ref) => {
    return (React.createElement(MuiLinearProgress__default, { ...props, ref: ref }));
});

/**
 * All supported colors for the Link component that can be passed as a string (without using primary.main, secondary.main, etc.).
 *
 * @see https://github.com/mui/material-ui/blob/f3945c1227afc13fbf732e66875095a793af2f10/packages/mui-material/src/Typography/Typography.js#L82
 */
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main',
};
// The sx prop does not support the color values of the Link component, so we need to transform them to the correct format.
const convertToSxSupportedColor = (color) => {
    // Temporary customization until the pink color will be replaced with purple.
    if (color === 'primary.main' || color === 'primary') {
        return '#C00BB9';
    }
    if (color === 'global.main') {
        return '#17929B';
    }
    return colorTransformations[color] || color;
};
// Modified reason: the Link component does not provide default style for :hover, therefore global CSS can override the link color.
const Link = React.forwardRef((inProps, ref) => {
    const { sx = {}, ...props } = inProps;
    const sxSupportedColor = convertToSxSupportedColor(props.color);
    return (React.createElement(MuiLink__default, { ...props, color: sxSupportedColor, sx: {
            // Setting the pseudo-classes color by default to prevent global CSS from overriding the link color on :hover.
            [LINK_PSEUDO_SELECTORS]: {
                color: sxSupportedColor,
            },
            ...sx,
        }, ref: ref }));
});
Link.defaultProps = {
    color: 'primary.main',
};

// Modified reason: Material UI Typescript problem with the 'component' prop.
const List = React.forwardRef((props, ref) => {
    return (React.createElement(MuiList__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const ListItem = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItem__default, { ...props, ref: ref }));
});

const ListItemAvatar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItemAvatar__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const ListItemButton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItemButton__default, { ...props, ref: ref }));
});

const ListItemIcon = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItemIcon__default, { ...props, ref: ref }));
});

const ListItemSecondaryAction = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItemSecondaryAction__default, { ...props, ref: ref }));
});

const ListItemText = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListItemText__default, { ...props, ref: ref }));
});

const ListSubheader = React.forwardRef((props, ref) => {
    return (React.createElement(MuiListSubheader__default, { ...props, ref: ref }));
});

// TODO: fix the any type, only when passing all props there is a problem with the type, when using only props.children it works fine.
// The need for passing the props is to allow overriding the default dateAdapter, when wanting to use a different dates library.
const LocalizationProvider = (props) => (
// eslint-disable-next-line @typescript-eslint/no-explicit-any
React.createElement(LocalizationProvider$1, { dateAdapter: AdapterDayjs, ...props }));

// Modified reason: Material UI Typescript problem with the 'component' prop.
const Menu = React.forwardRef((props, ref) => {
    return (React.createElement(MuiMenu__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const MenuItem = React.forwardRef((props, ref) => {
    return (React.createElement(MuiMenuItem__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const MenuList = React.forwardRef((props, ref) => {
    return (React.createElement(MuiMenuList__default, { ...props, ref: ref }));
});

const MobileStepper = React.forwardRef((props, ref) => {
    return (React.createElement(MuiMobileStepper__default, { ...props, ref: ref }));
});

const Modal = React.forwardRef((props, ref) => {
    return (React.createElement(MuiModal__default, { ...props, ref: ref }));
});

const NativeSelect = React.forwardRef((props, ref) => {
    return (React.createElement(MuiNativeSelect__default, { ...props, ref: ref }));
});

const OutlinedInput = React.forwardRef((props, ref) => {
    return (React.createElement(MuiOutlinedInput__default, { ...props, ref: ref }));
});

const Pagination = React.forwardRef((props, ref) => {
    return (React.createElement(MuiPagination__default, { ...props, ref: ref }));
});

const PaginationItem = React.forwardRef((props, ref) => {
    return (React.createElement(MuiPaginationItem__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const Paper = React.forwardRef((props, ref) => {
    return (React.createElement(MuiPaper__default, { ...props, ref: ref }));
});

const Popover = React.forwardRef((props, ref) => {
    return (React.createElement(MuiPopover__default, { ...props, ref: ref }));
});

// Modified reason: the placeholder prop is mandatory, we need to verify it after @mui/material 5.15.12.
const Popper = React.forwardRef((props, ref) => {
    return (React.createElement(MuiPopper__default, { placeholder: null, ...props, ref: ref }));
});

const Portal = (props) => (React.createElement(MuiPortal__default, { ...props }));

const Radio = React.forwardRef((props, ref) => {
    return (React.createElement(MuiRadio__default, { ...props, ref: ref }));
});

const RadioGroup = React.forwardRef((props, ref) => {
    return (React.createElement(MuiRadioGroup__default, { ...props, ref: ref }));
});

const Rating = React.forwardRef((props, ref) => {
    return (React.createElement(MuiRating__default, { ...props, ref: ref }));
});

const ScopedCssBaseline = (props) => (React.createElement(MuiScopedCssBaseline__default, { ...props }));

const Select = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSelect__default, { ...props, ref: ref }));
});

const Skeleton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSkeleton__default, { ...props, ref: ref }));
});

const Slide = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSlide__default, { ...props, ref: ref }));
});

const Slider = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSlider__default, { ...props, ref: ref }));
});

const Snackbar = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSnackbar__default, { ...props, ref: ref }));
});

const SnackbarContent = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSnackbarContent__default, { ...props, ref: ref }));
});

const SpeedDial = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSpeedDial__default, { ...props, ref: ref }));
});

const SpeedDialAction = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSpeedDialAction__default, { ...props, ref: ref }));
});

const SpeedDialIcon = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSpeedDialIcon__default, { ...props, ref: ref }));
});

// TODO: replace to icon from a dedicated package once available.
const ArrowDropDownIcon = () => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", sx: { fill: '#fff' } },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M17.2929 9.29289C17.6834 8.90237 18.3166 8.90237 18.7071 9.29289C19.0976 9.68342 19.0976 10.3166 18.7071 10.7071L12.7071 16.7071C12.3166 17.0976 11.6834 17.0976 11.2929 16.7071L5.29289 10.7071C4.90237 10.3166 4.90237 9.68342 5.29289 9.29289C5.68342 8.90237 6.31658 8.90237 6.70711 9.29289L12 14.5858L17.2929 9.29289Z" })));
};
const { slots, classNames } = createSlots('SplitButton', ['root', 'mainButton', 'caretButton']);
const Root = styled(ButtonGroup, slots.root)({});
const MainButton = styled(Button, slots.mainButton)({});
const CaretButton = styled(Button, slots.caretButton)(() => ({ paddingInline: 0 }));
const SplitButton = React.forwardRef((inProps, ref) => {
    const props = useThemeProps({ props: inProps, name: slots.root.name });
    const { onClick, children, MainButtonProps = {}, CaretButtonProps = {}, slotProps = {}, ...rootProps } = props;
    return (React.createElement(Root, { ...rootProps, ref: ref, className: clsx([[classNames.root, rootProps.className]]), ownerState: props },
        React.createElement(MainButton, { onClick: onClick, ...MainButtonProps, ...slotProps.mainButton, className: clsx([classNames.mainButton, MainButtonProps.className, slotProps.mainButton?.className]), ownerState: props }, children),
        React.createElement(CaretButton, { ...CaretButtonProps, ...slotProps.caretButton, className: clsx([classNames.caretButton, CaretButtonProps.className, slotProps.caretButton?.className]), ownerState: props })));
});
SplitButton.defaultProps = {
    variant: 'contained',
};
CaretButton.defaultProps = {
    children: React.createElement(ArrowDropDownIcon, null),
};

const Step = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStep__default, { ...props, ref: ref }));
});

const StepButton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStepButton__default, { ...props, ref: ref }));
});

const StepConnector = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStepConnector__default, { ...props, ref: ref }));
});

const StepContent = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStepContent__default, { ...props, ref: ref }));
});

const CheckedCircleIcon = React.forwardRef((props, ref) => {
    const theme = useTheme();
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React.createElement("g", { clipPath: "url(#clip0_2503_21505)" },
            React.createElement("circle", { cx: "12", cy: "12", r: "12", fill: theme.palette.primary.main }),
            React.createElement("path", { fill: theme.palette.primary.contrastText, fillRule: "evenodd", clipRule: "evenodd", d: "M17.7753 8.22472C17.5312 7.98064 17.1355 7.98064 16.8914 8.22472L10.6667 14.4494L7.77532 11.5581C7.53124 11.314 7.13551 11.314 6.89143 11.5581C6.64735 11.8021 6.64735 12.1979 6.89143 12.4419L10.2248 15.7753C10.4688 16.0194 10.8646 16.0194 11.1086 15.7753L17.7753 9.10861C18.0194 8.86453 18.0194 8.4688 17.7753 8.22472Z" })),
        React.createElement("defs", null,
            React.createElement("clipPath", { id: "clip0_2503_21505" },
                React.createElement("rect", { width: "24", height: "24", rx: "12", fill: "white" })))));
});
// Modified reason: modifying the completed icon.
const StepIcon = React.forwardRef((inProps, ref) => {
    const props = { ...inProps };
    if (props.completed) {
        // Overriding the completed icon using the 'as' prop because Mui does not have a dedicated prop for it.
        // see: https://github.com/mui/material-ui/blob/bcef13eef3208716bc33482dd5af3ac90ae18dc4/packages/mui-material/src/StepIcon/StepIcon.js#L87
        props.as = (svgProps) => React.createElement(CheckedCircleIcon, { ...svgProps });
    }
    return (React.createElement(MuiStepIcon__default, { ...props, ref: ref }));
});

// Modified reason: modifying the default props and fixing the StepIconProps.label className.
const StepLabel = React.forwardRef((inProps, ref) => {
    const props = { ...inProps };
    if (!props.componentsProps) {
        props.componentsProps = {};
    }
    if (!props.componentsProps.label) {
        props.componentsProps.label = {};
    }
    /**
     * There is a problem with how this component is built in Mui.
     * Currently when using this component outside of its context (without a Step and Stepper components as wrappers),
     * the component doesn't get the active and completed classNames, which define the required style for these states.
     */
    props.componentsProps = {
        ...props.componentsProps,
        label: {
            ...props.componentsProps.label,
            className: clsx([
                props.componentsProps.label.className,
                props.StepIconProps?.active && 'Mui-active',
                props.StepIconProps?.completed && 'Mui-completed',
                props.StepIconProps?.error && 'Mui-error',
            ]),
        },
    };
    return (React.createElement(MuiStepLabel__default, { ...props, ref: ref }));
});
StepLabel.defaultProps = {
    StepIconComponent: StepIcon,
};

const Stepper = React.forwardRef((props, ref) => {
    return (React.createElement(MuiStepper__default, { ...props, ref: ref }));
});

const SwipeableDrawer = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSwipeableDrawer__default, { ...props, ref: ref }));
});

const Switch = React.forwardRef((props, ref) => {
    return (React.createElement(MuiSwitch__default, { ...props, ref: ref }));
});

const Tab = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTab__default, { ...props, ref: ref }));
});

const TabScrollButton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTabScrollButton__default, { ...props, ref: ref }));
});

const Table = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTable__default, { ...props, ref: ref }));
});

const TableBody = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableBody__default, { ...props, ref: ref }));
});

const TableCell = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableCell__default, { ...props, ref: ref }));
});

const TableContainer = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableContainer__default, { ...props, ref: ref }));
});

const TableFooter = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableFooter__default, { ...props, ref: ref }));
});

const TableHead = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableHead__default, { ...props, ref: ref }));
});

const TablePagination = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTablePagination__default, { ...props, ref: ref }));
});

const TableRow = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableRow__default, { ...props, ref: ref }));
});

const TableSortLabel = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTableSortLabel__default, { ...props, ref: ref }));
});

const Tabs = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTabs__default, { ...props, ref: ref }));
});

const TextareaAutosize = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTextareaAutosize__default, { ...props, ref: ref }));
});

const ClockIcon = React.forwardRef((props, ref) => {
    return (React.createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 3.75C7.44365 3.75 3.75 7.44365 3.75 12C3.75 16.5563 7.44365 20.25 12 20.25C16.5563 20.25 20.25 16.5563 20.25 12C20.25 7.44365 16.5563 3.75 12 3.75ZM2.25 12C2.25 6.61522 6.61522 2.25 12 2.25C17.3848 2.25 21.75 6.61522 21.75 12C21.75 17.3848 17.3848 21.75 12 21.75C6.61522 21.75 2.25 17.3848 2.25 12ZM12 6.25C12.4142 6.25 12.75 6.58579 12.75 7V11.6893L15.5303 14.4697C15.8232 14.7626 15.8232 15.2374 15.5303 15.5303C15.2374 15.8232 14.7626 15.8232 14.4697 15.5303L11.4697 12.5303C11.329 12.3897 11.25 12.1989 11.25 12V7C11.25 6.58579 11.5858 6.25 12 6.25Z" })));
});
const TimePicker = React.forwardRef(({ slots = {}, slotProps = {}, ...props }, ref) => {
    return (React.createElement(TimePicker$1, { ...props, ref: ref, slots: {
            clearButton: IconButton,
            inputAdornment: InputAdornment,
            nextIconButton: IconButton,
            openPickerButton: IconButton,
            openPickerIcon: ClockIcon,
            previousIconButton: IconButton,
            textField: TextField,
            ...slots,
        }, slotProps: {
            layout: {
                sx: {
                    // The time controls should always be aligned to the left.
                    direction: 'ltr /* @noflip */',
                },
            },
            actionBar: {
                sx: {
                    // The action bar should be aligned according to the general direction (flipped by Material-UI in RTL mode).
                    direction: 'ltr',
                },
            },
            ...slotProps,
        } }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const ToggleButton = React.forwardRef((props, ref) => {
    return (React.createElement(MuiToggleButton__default, { ...props, ref: ref }));
});

const ToggleButtonGroup = React.forwardRef((props, ref) => {
    return (React.createElement(MuiToggleButtonGroup__default, { ...props, ref: ref }));
});

const Tooltip = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTooltip__default, { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const Typography = React.forwardRef((props, ref) => {
    return (React.createElement(MuiTypography__default, { ...props, ref: ref }));
});

const Zoom = React.forwardRef((props, ref) => {
    return (React.createElement(MuiZoom__default, { ...props, ref: ref }));
});

// The default Theme type in Mui is unknown, so we need to override it with our own Theme type.
const useMediaQuery = (useMediaQuery__default);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const withDirection = (Component) => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return styled(Component)(({ theme }) => {
        return {
            // Flip the icon in RTL mode.
            transform: theme.direction === 'rtl' ? 'scaleX(-1)' : undefined,
        };
    });
};

export { Accordion, AccordionActions, AccordionDetails, AccordionSummary, Alert, AlertAction, AlertTitle, AppBar, Autocomplete, Avatar, AvatarGroup, Backdrop, Badge, BottomNavigation, BottomNavigationAction, Box, Breadcrumbs, Button, ButtonBase, ButtonGroup, Card, CardActionArea, CardActions, CardContent, CardHeader, CardMedia, Checkbox, Chip, CircularProgress, ClickAwayListener, CloseButton, Collapse, Container, CssBaseline, DatePicker, Dialog, DialogActions, DialogContent, DialogContentText, DialogHeader, DialogHeaderGroup, DialogTitle, DirectionContext, DirectionProvider, Divider, Drawer, Fab, Fade, FilledInput, FormControl, FormControlLabel, FormGroup, FormHelperText, FormLabel, Grid, Grow, Icon, IconButton, ImageList, ImageListItem, ImageListItemBar, Input, InputAdornment, InputBase, InputLabel, LinearProgress, Link, List, ListItem, ListItemAvatar, ListItemButton, ListItemIcon, ListItemSecondaryAction, ListItemText, ListSubheader, LocalizationProvider, Menu, MenuItem, MenuList, MobileStepper, Modal, NativeSelect, OutlinedInput, Pagination, PaginationItem, Paper, Popover, Popper, Portal, Radio, RadioGroup, Rating, ScopedCssBaseline, Select, Skeleton, Slide, Slider, Snackbar, SnackbarContent, SpeedDial, SpeedDialAction, SpeedDialIcon, SplitButton, Stack, Step, StepButton, StepConnector, StepContent, StepIcon, StepLabel, Stepper, SvgIcon, SwipeableDrawer, Switch, Tab, TabScrollButton, Table, TableBody, TableCell, TableContainer, TableFooter, TableHead, TablePagination, TableRow, TableSortLabel, Tabs, TextField, TextareaAutosize, ThemeProvider, TimePicker, ToggleButton, ToggleButtonGroup, Toolbar, Tooltip, Typography, Zoom, createSlots, index as styles, useMediaQuery, withDirection };
//# sourceMappingURL=index.esm.js.map
