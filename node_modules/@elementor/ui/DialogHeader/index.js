'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var clsx = require('clsx');
var MuiAppBar$1 = require('@mui/material/AppBar');
var MuiToolbar = require('@mui/material/Toolbar');
var MuiSvgIcon = require('@mui/material/SvgIcon');
var MuiStack = require('@mui/material/Stack');
var MuiIconButton$1 = require('@mui/material/IconButton');
var styles = require('@mui/material/styles');
var rtlPlugin = require('stylis-plugin-rtl');
require('@emotion/react');
var createCache = require('@emotion/cache');
var stylis = require('stylis');
require('@mui/material/useMediaQuery');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);
var MuiAppBar__default = /*#__PURE__*/_interopDefaultLegacy(MuiAppBar$1);
var MuiToolbar__default = /*#__PURE__*/_interopDefaultLegacy(MuiToolbar);
var MuiSvgIcon__default = /*#__PURE__*/_interopDefaultLegacy(MuiSvgIcon);
var MuiStack__default = /*#__PURE__*/_interopDefaultLegacy(MuiStack);
var MuiIconButton__default = /*#__PURE__*/_interopDefaultLegacy(MuiIconButton$1);
var rtlPlugin__default = /*#__PURE__*/_interopDefaultLegacy(rtlPlugin);
var createCache__default = /*#__PURE__*/_interopDefaultLegacy(createCache);

const AppBar = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiAppBar__default["default"], { ...props, ref: ref }));
});

const Toolbar = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiToolbar__default["default"], { ...props, ref: ref }));
});

const SvgIcon = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiSvgIcon__default["default"], { ...props, ref: ref }));
});

const Stack = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiStack__default["default"], { ...props, ref: ref }));
});

// Modified reason: Material UI Typescript problem with the 'component' prop.
const IconButton = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(MuiIconButton__default["default"], { ...props, ref: ref }));
});

/**
 * Do not edit directly
 * Generated on Wed, 10 Jan 2024 15:06:56 GMT
 */
const ColorCommonBlack = "#000000";
const ColorCommonWhite = "#ffffff";
const ColorGrey50 = "#f1f3f3";
const ColorGrey100 = "#d5d8dc";
const ColorGrey200 = "#babfc5";
const ColorGrey300 = "#9da5ae";
const ColorGrey400 = "#818a96";
const ColorGrey500 = "#69727d";
const ColorGrey600 = "#515962";
const ColorGrey700 = "#3f444b";
const ColorGrey800 = "#1f2124";
const ColorGrey900 = "#0c0d0e";
const ColorPink200 = "#f3bafd";
const ColorPink300 = "#f0abfc";
const ColorPink400 = "#eb8efb";
const ColorRed500 = "#ef4444";
const ColorRed600 = "#dc2626";
const ColorRed700 = "#b91c1c";
const ColorYellow400 = "#fbbf24";
const ColorYellow500 = "#f59e0b";
const ColorYellow600 = "#d97706";
const ColorYellow700 = "#bb5b1d";
const ColorYellow800 = "#b15211";
const ColorBlue500 = "#3b82f6";
const ColorBlue600 = "#2563eb";
const ColorBlue700 = "#1d4ed8";
const ColorGreen500 = "#10b981";
const ColorGreen600 = "#0a875a";
const ColorGreen700 = "#047857";
const ColorCyan300 = "#99f6e4";
const ColorCyan400 = "#5eead4";
const ColorCyan500 = "#2adfcd";
const ColorBurgundy700 = "#b51243";
const ColorBurgundy800 = "#93003f";
const ColorBurgundy900 = "#7e013b";

const MuiAccordion = {
    styleOverrides: {
        root: ({ theme }) => ({
            backgroundColor: theme.palette.background.default,
            '&:before': {
                // The accordion has an upper divider by default, which is not needed.
                content: 'none',
            },
            '&.Mui-expanded': {
                margin: 0,
            },
            '&.MuiAccordion-gutters + .MuiAccordion-root.MuiAccordion-gutters': {
                marginTop: theme.spacing(1),
                marginBottom: theme.spacing(0),
            },
            '&:not(.MuiAccordion-gutters) + .MuiAccordion-root:not(.MuiAccordion-gutters)': {
                borderTop: 0,
            },
            '&.Mui-disabled': {
                backgroundColor: theme.palette.background.default,
            },
        }),
    },
};

const MuiAccordionActions = {
    styleOverrides: {
        root: ({ theme }) => ({
            padding: theme.spacing(2),
        }),
    },
};

const MuiAccordionSummary = {
    styleOverrides: {
        root: () => ({
            // Matching the default minHeight of .MuiAccordionSummary.Mui-expanded
            minHeight: '64px',
        }),
        content: ({ theme }) => ({
            margin: theme.spacing(1, 0),
            '&.MuiAccordionSummary-content.Mui-expanded': {
                margin: theme.spacing(1, 0),
            },
        }),
    },
};

const MuiAppBar = {
    defaultProps: {
        elevation: 0,
        color: 'default',
    },
};

const MuiAutocomplete = {
    defaultProps: {
        slotProps: {
            paper: {
                elevation: 6,
            },
        },
    },
};

const MuiButton = {
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            whiteSpace: 'nowrap',
            '&:hover': {
                boxShadow: 'none',
            },
            '& .MuiSvgIcon-root': {
                fill: 'currentColor',
            },
        }),
    },
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '&:hover': {
                    borderColor: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'primary', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '&:hover': {
                    borderColor: '#17929B',
                },
            }),
        },
        {
            props: { color: 'global', variant: 'text' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
    ],
};

const MuiButtonBase = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            '&.MuiButtonBase-root.Mui-focusVisible': {
                // Temp customization for accessibility (using 'border' because 'outline' is not working properly in Tabs).
                boxShadow: '0 0 0 1px inset',
            },
            // The CircularProgress component used as a loader of the buttons.
            '.MuiCircularProgress-root': {
                fontSize: 'inherit',
            },
        }),
    },
};

const themePaletteSemanticColors = [
    'primary',
    'secondary',
    'error',
    'warning',
    'info',
    'success',
    'accent',
    'global',
    'promotion',
];
const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';

const MuiButtonGroup = {
    defaultProps: {
        disableRipple: true,
    },
    styleOverrides: {
        root: () => ({
            boxShadow: 'none',
            '&:hover': {
                boxShadow: 'none',
            },
        }),
    },
    variants: themePaletteSemanticColors.map((color) => ({
        props: { variant: 'contained', color },
        // Fixing a Material UI bug when one of the group children is wrapped with another element (e.g. a tooltip).
        style: ({ theme }) => {
            return {
                // Removing the border of the grouped buttons for supporting additional children types.
                '& .MuiButtonGroup-grouped:not(:last-of-type), & .MuiButtonGroup-grouped:not(:last-of-type).Mui-disabled': {
                    borderRight: 0,
                },
                // Supporting additional children types, when a button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child), & > *:not(:last-child) .MuiButtonGroup-grouped': {
                    borderRight: `1px solid ${theme.palette[color].dark}`,
                },
                // Supporting additional children types, when a disabled button can be inside another element (e.g. a tooltip).
                '& .MuiButtonGroup-grouped:not(:last-child).Mui-disabled, & > *:not(:last-child) .MuiButtonGroup-grouped.Mui-disabled': {
                    borderRight: `1px solid ${theme.palette.action.disabled}`,
                },
            };
        },
    })),
};

const MuiChip = {
    variants: [
        {
            props: { color: 'primary', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
                borderColor: '#C00BB9',
                '& .MuiChip-deleteIcon': {
                    color: '#D355CE',
                    '&:hover': {
                        color: '#C00BB9',
                    },
                },
            }),
        },
        {
            props: { color: 'global', variant: 'outlined' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
                borderColor: '#17929B',
                '& .MuiChip-deleteIcon': {
                    color: '#5DB3B9',
                    '&:hover': {
                        color: '#17929B',
                    },
                },
            }),
        },
    ],
};

const MuiCircularProgress = {
    defaultProps: {
        color: 'inherit',
        /**
         * Customizing to 1em for easy customization by other components that wrap the CircularProgress.
         * Setting the default size value in the styleOverrides fontSize property.
         */
        size: '1em',
    },
    styleOverrides: {
        root: ({ theme }) => ({
            // Temporarily reading the value from the spacing, until we'll find a better solution.
            fontSize: theme.spacing(5),
        }),
    },
};

const MuiDialogContent = {
    styleOverrides: {
        dividers: () => ({
            '&:last-child': {
                // Fixing Material UI bug - when the divider is the last child it should not be shown.
                borderBottom: 'none',
            },
        }),
    },
};

const MuiDialogTitle = {
    styleOverrides: {
        root: ({ theme }) => ({
            fontWeight: theme.typography.fontWeightBold,
        }),
    },
};

const MuiFormHelperText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.tertiary,
            margin: theme.spacing(0.5, 0, 0),
        }),
    },
};

const MuiIconButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#C00BB9',
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                color: '#17929B',
            }),
        },
        {
            props: { edge: 'start', size: 'small' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'end', size: 'small' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-1.5),
            }),
        },
        {
            props: { edge: 'start', size: 'large' },
            style: ({ theme }) => ({
                marginLeft: theme.spacing(-2),
            }),
        },
        {
            props: { edge: 'end', size: 'large' },
            style: ({ theme }) => ({
                marginRight: theme.spacing(-2),
            }),
        },
    ],
};

const MuiInputBase = {
    styleOverrides: {
        input: () => ({
            // Setting the background color to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
            },
        }),
    },
};

const MuiListItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemButton = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiListItemText = {
    styleOverrides: {
        root: ({ theme }) => ({
            color: theme.palette.text.primary,
        }),
    },
};

// TODO: update the relevant components when the paper background image is changed.
const PAPER_BACKGROUND_IMAGE = 'linear-gradient(rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0.12))';
/**
 * The purpose of this empty configuration object is to make sure that all components that uses the PAPER_BACKGROUND_IMAGE const,
 * Should also be adjusted if the paper background image is changed.
 */
const MuiPaper = {};

const MuiListSubheader = {
    styleOverrides: {
        root: ({ theme }) => ({
            // The background color should be the same as the drop-downs background color.
            backgroundImage: PAPER_BACKGROUND_IMAGE,
            // Temp value until there will be a token in the design system.
            lineHeight: '36px',
            color: theme.palette.text.tertiary,
            fontSize: theme.typography.caption.fontSize,
            fontWeight: theme.typography.caption.fontWeight,
            fontFamily: theme.typography.caption.fontFamily,
            letterSpacing: theme.typography.caption.letterSpacing,
        }),
    },
};

const MuiMenu = {
    defaultProps: {
        elevation: 6,
    },
};

const MuiMenuItem = {
    styleOverrides: {
        root: ({ theme }) => ({
            // Setting the pseudo-classes color to prevent global style overrides when the MenuItem is an "a" tag.
            'a&': {
                [LINK_PSEUDO_SELECTORS]: {
                    color: theme.palette.text.primary,
                },
            },
        }),
    },
};

const MuiSelect = {
    styleOverrides: {
        nativeInput: () => ({
            // Setting the background color and opacity to prevent global style overrides.
            '.MuiInputBase-root.Mui-disabled &': {
                backgroundColor: 'initial',
                opacity: 0,
            },
        }),
    },
};

const MuiStepIcon = {
    styleOverrides: {
        root: ({ theme }) => ({
            '&:not(.Mui-active) .MuiStepIcon-text': {
                fill: theme.palette.common.white,
            },
        }),
    },
};

const MuiStepLabel = {
    styleOverrides: {
        root: () => ({
            alignItems: 'flex-start',
        }),
    },
};

const MuiStepper = {
    styleOverrides: {
        root: () => ({
            '& .MuiStepLabel-root': {
                alignItems: 'center',
            },
        }),
    },
};

const MuiToggleButton = {
    variants: [
        {
            props: { color: 'primary' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#C00BB9',
                },
            }),
        },
        {
            props: { color: 'global' },
            style: () => ({
                // Temporary customizations until it will be decided in the design-system.
                '&.MuiToggleButton-root.Mui-selected': {
                    color: '#17929B',
                },
            }),
        },
    ],
};

const MuiTooltip = {
    defaultProps: {
        arrow: true,
    },
};

var components = {
    MuiAccordion,
    MuiAccordionActions,
    MuiAccordionSummary,
    MuiAppBar,
    MuiAutocomplete,
    MuiButton,
    MuiButtonBase,
    MuiButtonGroup,
    MuiChip,
    MuiCircularProgress,
    MuiDialogContent,
    MuiDialogTitle,
    MuiFormHelperText,
    MuiIconButton,
    MuiInputBase,
    MuiListItem,
    MuiListItemButton,
    MuiListItemText,
    MuiListSubheader,
    MuiMenu,
    MuiMenuItem,
    MuiPaper,
    MuiSelect,
    MuiStepIcon,
    MuiStepLabel,
    MuiStepper,
    MuiToggleButton,
    MuiTooltip,
};

const themeBaseConfig = {
    components,
    typography: {
        button: {
            textTransform: 'none',
        },
        subtitle1: {
            lineHeight: 1.3,
        },
        subtitle2: {
            lineHeight: 1.3,
        },
    },
};

styles.createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'light',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey600,
            light: ColorGrey500,
            dark: ColorGrey700,
            contrastText: ColorCommonWhite,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorGrey900,
            secondary: ColorGrey700,
            tertiary: ColorGrey500,
            disabled: ColorGrey300,
        },
        background: {
            paper: ColorCommonWhite,
            default: ColorCommonWhite,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow700,
            light: ColorYellow600,
            dark: ColorYellow800,
            contrastText: ColorCommonWhite,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

styles.createTheme({
    ...themeBaseConfig,
    palette: {
        mode: 'dark',
        primary: {
            main: ColorPink300,
            light: ColorPink200,
            dark: ColorPink400,
            contrastText: ColorGrey900,
        },
        secondary: {
            main: ColorGrey300,
            light: ColorGrey200,
            dark: ColorGrey400,
            contrastText: ColorGrey900,
        },
        grey: {
            50: ColorGrey50,
            100: ColorGrey100,
            200: ColorGrey200,
            300: ColorGrey300,
            400: ColorGrey400,
            500: ColorGrey500,
            600: ColorGrey600,
            700: ColorGrey700,
            800: ColorGrey800,
            900: ColorGrey900,
        },
        text: {
            primary: ColorCommonWhite,
            secondary: ColorGrey200,
            tertiary: ColorGrey300,
            disabled: ColorGrey600,
        },
        background: {
            paper: ColorGrey900,
            default: ColorGrey800,
        },
        success: {
            main: ColorGreen600,
            light: ColorGreen500,
            dark: ColorGreen700,
            contrastText: ColorCommonWhite,
        },
        error: {
            main: ColorRed600,
            light: ColorRed500,
            dark: ColorRed700,
            contrastText: ColorCommonWhite,
        },
        warning: {
            main: ColorYellow500,
            light: ColorYellow400,
            dark: ColorYellow800,
            contrastText: ColorCommonBlack,
        },
        info: {
            main: ColorBlue600,
            light: ColorBlue500,
            dark: ColorBlue700,
            contrastText: ColorCommonWhite,
        },
        global: {
            main: ColorCyan400,
            light: ColorCyan300,
            dark: ColorCyan500,
            contrastText: ColorGrey900,
        },
        // TODO: the accent values should be updated as part of a deprecation process.
        accent: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
        promotion: {
            main: ColorBurgundy800,
            light: ColorBurgundy700,
            dark: ColorBurgundy900,
            contrastText: ColorCommonWhite,
        },
    },
});

React__default["default"].createContext(false);
/**
 * @see https://mui.com/material-ui/guides/right-to-left/
 */
createCache__default["default"]({
    // Define class names prefix.
    key: 'eui-rtl',
    stylisPlugins: [stylis.prefixer, rtlPlugin__default["default"]],
});

const createSlots = (componentName, componentSlots) => {
    const slots = {};
    const classNames = {};
    componentSlots.forEach((slot) => {
        classNames[slot] = `Mui${componentName}-${slot}`;
        slots[slot] = {
            slot,
            name: `Mui${componentName}`,
        };
    });
    return {
        slots,
        classNames,
    };
};

const XIcon = React__default["default"].forwardRef((props, ref) => {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 24 24", ...props, ref: ref },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18.5303 5.46967C18.8232 5.76256 18.8232 6.23744 18.5303 6.53033L6.53033 18.5303C6.23744 18.8232 5.76256 18.8232 5.46967 18.5303C5.17678 18.2374 5.17678 17.7626 5.46967 17.4697L17.4697 5.46967C17.7626 5.17678 18.2374 5.17678 18.5303 5.46967Z" }),
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M5.46967 5.46967C5.76256 5.17678 6.23744 5.17678 6.53033 5.46967L18.5303 17.4697C18.8232 17.7626 18.8232 18.2374 18.5303 18.5303C18.2374 18.8232 17.7626 18.8232 17.4697 18.5303L5.46967 6.53033C5.17678 6.23744 5.17678 5.76256 5.46967 5.46967Z" })));
});
const { slots: slots$1, classNames: classNames$1 } = createSlots('CloseButton', ['root', 'icon']);
const Root$1 = styles.styled(IconButton, slots$1.root)({});
const Icon = styles.styled(XIcon, slots$1.icon)({});
const CloseButton = React__default["default"].forwardRef((inProps, ref) => {
    const props = styles.useThemeProps({ props: inProps, name: slots$1.root.name });
    const { slotProps = {}, ...rootProps } = props;
    return (React__default["default"].createElement(Root$1, { ...rootProps, size: "small", ref: ref, className: clsx__default["default"]([[classNames$1.root, rootProps.className]]), ownerState: props },
        React__default["default"].createElement(Icon, { ...slotProps.icon, className: clsx__default["default"]([classNames$1.icon, slotProps.icon?.className]), ownerState: props })));
});
CloseButton.defaultProps = {
    'aria-label': 'close',
    color: 'default',
};

const ElementorLogo = (props) => {
    return (React__default["default"].createElement(SvgIcon, { viewBox: "0 0 32 32", ...props },
        React__default["default"].createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M2.69648 24.8891C0.938383 22.2579 0 19.1645 0 16C0 11.7566 1.68571 7.68687 4.68629 4.68629C7.68687 1.68571 11.7566 0 16 0C19.1645 0 22.2579 0.938383 24.8891 2.69648C27.5203 4.45459 29.5711 6.95344 30.7821 9.87706C31.9931 12.8007 32.3099 16.0177 31.6926 19.1214C31.0752 22.2251 29.5514 25.0761 27.3137 27.3137C25.0761 29.5514 22.2251 31.0752 19.1214 31.6926C16.0177 32.3099 12.8007 31.9931 9.87706 30.7821C6.95344 29.5711 4.45459 27.5203 2.69648 24.8891ZM12.0006 9.33281H9.33437V22.6665H12.0006V9.33281ZM22.6657 9.33281H14.6669V11.9991H22.6657V9.33281ZM22.6657 14.6654H14.6669V17.3316H22.6657V14.6654ZM22.6657 20.0003H14.6669V22.6665H22.6657V20.0003Z" })));
};
const StyledElementorLogo = styles.styled(ElementorLogo)(({ theme }) => ({
    width: theme.spacing(3),
    height: theme.spacing(3),
    '& path': {
        fill: theme.palette.text.primary,
    },
    marginRight: theme.spacing(1),
}));
const StyledCustomLogo = styles.styled('span')(({ theme }) => ({
    marginRight: theme.spacing(1),
}));
const Logo = ({ logo, ...rest }) => {
    if (logo === false) {
        return null;
    }
    if (logo) {
        return React__default["default"].createElement(StyledCustomLogo, null, logo);
    }
    return React__default["default"].createElement(StyledElementorLogo, { ...rest });
};
const { slots, classNames } = createSlots('DialogHeader', ['root', 'logo', 'toolbar']);
const Root = styles.styled(AppBar, slots.root)({
    '& .MuiDialogTitle-root': {
        padding: 0,
    },
});
const ToolbarSlot = styles.styled(Toolbar, slots.toolbar)({});
const DialogHeader = React__default["default"].forwardRef((inProps, ref) => {
    const props = styles.useThemeProps({ props: inProps, name: slots.root.name });
    const { slotProps = {}, logo, onClose, ...rootProps } = props;
    return (React__default["default"].createElement(Root, { ...rootProps, ref: ref, className: clsx__default["default"]([[classNames.root, rootProps.className]]), ownerState: props },
        React__default["default"].createElement(ToolbarSlot, { variant: "dense", ...slotProps.toolbar, className: clsx__default["default"]([classNames.toolbar, slotProps.toolbar?.className]), ownerState: props },
            React__default["default"].createElement(Logo, { logo: logo, className: clsx__default["default"]([classNames.logo, slotProps.logo?.className]) }),
            React__default["default"].createElement(Stack, { direction: "row", alignItems: "center", flex: 1 }, props.children),
            onClose && (React__default["default"].createElement(CloseButton, { edge: "end", onClick: onClose, sx: { '&.MuiButtonBase-root': { ml: 0.5 } } })))));
});
DialogHeader.defaultProps = {
    color: 'transparent',
    position: 'relative',
};

exports["default"] = DialogHeader;
//# sourceMappingURL=index.js.map
