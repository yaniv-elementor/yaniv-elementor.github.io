{"version":3,"file":"index.esm.js","sources":["../../library/styles/theme-config/constants.ts","../../library/Button/Button.tsx"],"sourcesContent":["export const themePaletteSemanticColors = [\n\t'primary',\n\t'secondary',\n\t'error',\n\t'warning',\n\t'info',\n\t'success',\n\t'accent',\n\t'global',\n\t'promotion',\n] as const;\n\nexport const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';\n","import React from 'react';\nimport { default as MuiButton, ButtonProps as MuiButtonProps } from '@mui/material/Button';\nimport { LINK_PSEUDO_SELECTORS } from '../styles/theme-config/constants';\n/**\n * Material UI has a known typescript problem with components that uses the 'component' prop:\n *\n * @see https://github.com/mui/material-ui/pull/32404#issuecomment-1105228783\n *\n * Therefore, adding a workaround by extending the source MenuProps interface and adding the 'component' prop.\n *\n * At the moment that the following PR is merged, this workaround can probably be removed:\n *\n * @see https://github.com/mui/material-ui/pull/35924\n *\n * Once the PR is merged, verify the fix by making sure that there is no typescript error in the following code:\n *\n * <Button component=\"a\" href=\"https://www.elementor.com\"></Button>\n *\n * The following components share the same problem: Button, IconButton, ToggleButton, List, ListItem, ListItemButton, MenuList, Menu, MenuItem, Paper, Dialog, Drawer, Typography.\n */\n\nexport interface ButtonProps extends MuiButtonProps {\n\tcomponent?: React.ElementType;\n\thref?: HTMLAnchorElement['href'];\n\ttarget?: HTMLAnchorElement['target'];\n}\n\nconst hardCodedColor = {\n\tprimary: '#C00BB9',\n\tglobal: '#17929B',\n};\n\nconst getLinkTextColor = ( color: ButtonProps['color'] = 'primary', variant: ButtonProps['variant'] = 'text' ) => {\n\tif ( ! color ) {\n\t\treturn;\n\t}\n\n\tif ( color === 'inherit' ) {\n\t\treturn 'inherit';\n\t}\n\n\tif ( variant === 'contained' ) {\n\t\treturn `${ color }.contrastText`;\n\t}\n\n\tif ( color in hardCodedColor ) {\n\t\treturn hardCodedColor[ color as keyof typeof hardCodedColor ];\n\t}\n\n\treturn `${ color }.main`;\n};\n\n// Modified reason: Material UI Typescript problem with the 'component' prop and handling the link global style overrides.\nconst Button = React.forwardRef<HTMLElement, ButtonProps>( ( props, ref ) => {\n\tconst { sx = {}, ...rootProps } = props;\n\tlet linkSx = {};\n\n\t// Temporary solution to prevent global styles from affecting the link color.\n\tif ( rootProps.href ) {\n\t\tlinkSx = {\n\t\t\t[ LINK_PSEUDO_SELECTORS ]: {\n\t\t\t\tcolor: getLinkTextColor( rootProps.color, rootProps.variant ),\n\t\t\t},\n\t\t};\n\t}\n\n\treturn (\n\t\t<MuiButton\n\t\t\t{ ...props }\n\t\t\tsx={ {\n\t\t\t\t...linkSx,\n\t\t\t\t...sx,\n\t\t\t} }\n\t\t\tref={ ref as React.MutableRefObject<null> }\n\t\t/>\n\t);\n} ) as React.FC<ButtonProps>;\n\nexport default Button;\n"],"names":["MuiButton"],"mappings":";;;;AAYO,MAAM,qBAAqB,GAAG,oCAAoC;;ACezE,MAAM,cAAc,GAAG;AACtB,IAAA,OAAO,EAAE,SAAS;AAClB,IAAA,MAAM,EAAE,SAAS;CACjB,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAE,KAAA,GAA8B,SAAS,EAAE,OAAA,GAAkC,MAAM,KAAK;IAChH,IAAK,CAAE,KAAK,EAAG;QACd,OAAO;AACP,KAAA;IAED,IAAK,KAAK,KAAK,SAAS,EAAG;AAC1B,QAAA,OAAO,SAAS,CAAC;AACjB,KAAA;IAED,IAAK,OAAO,KAAK,WAAW,EAAG;QAC9B,OAAO,CAAA,EAAI,KAAM,CAAA,aAAA,CAAe,CAAC;AACjC,KAAA;IAED,IAAK,KAAK,IAAI,cAAc,EAAG;AAC9B,QAAA,OAAO,cAAc,CAAE,KAAoC,CAAE,CAAC;AAC9D,KAAA;IAED,OAAO,CAAA,EAAI,KAAM,CAAA,KAAA,CAAO,CAAC;AAC1B,CAAC,CAAC;AAEF;AACM,MAAA,MAAM,GAAG,KAAK,CAAC,UAAU,CAA4B,CAAE,KAAK,EAAE,GAAG,KAAK;IAC3E,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACxC,IAAI,MAAM,GAAG,EAAE,CAAC;;IAGhB,IAAK,SAAS,CAAC,IAAI,EAAG;AACrB,QAAA,MAAM,GAAG;YACR,CAAE,qBAAqB,GAAI;gBAC1B,KAAK,EAAE,gBAAgB,CAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,OAAO,CAAE;AAC7D,aAAA;SACD,CAAC;AACF,KAAA;AAED,IAAA,QACC,KAAC,CAAA,aAAA,CAAAA,kBAAS,OACJ,KAAK,EACV,EAAE,EAAG;AACJ,YAAA,GAAG,MAAM;AACT,YAAA,GAAG,EAAE;AACL,SAAA,EACD,GAAG,EAAG,GAAmC,EAAA,CACxC,EACD;AACH,CAAC;;;;"}