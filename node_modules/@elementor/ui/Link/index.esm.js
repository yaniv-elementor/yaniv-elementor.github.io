import React from 'react';
import MuiLink__default from '@mui/material/Link';
export * from '@mui/material/Link';

const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';

/**
 * All supported colors for the Link component that can be passed as a string (without using primary.main, secondary.main, etc.).
 *
 * @see https://github.com/mui/material-ui/blob/f3945c1227afc13fbf732e66875095a793af2f10/packages/mui-material/src/Typography/Typography.js#L82
 */
const colorTransformations = {
    primary: 'primary.main',
    textPrimary: 'text.primary',
    secondary: 'secondary.main',
    textSecondary: 'text.secondary',
    error: 'error.main',
};
// The sx prop does not support the color values of the Link component, so we need to transform them to the correct format.
const convertToSxSupportedColor = (color) => {
    // Temporary customization until the pink color will be replaced with purple.
    if (color === 'primary.main' || color === 'primary') {
        return '#C00BB9';
    }
    if (color === 'global.main') {
        return '#17929B';
    }
    return colorTransformations[color] || color;
};
// Modified reason: the Link component does not provide default style for :hover, therefore global CSS can override the link color.
const Link = React.forwardRef((inProps, ref) => {
    const { sx = {}, ...props } = inProps;
    const sxSupportedColor = convertToSxSupportedColor(props.color);
    return (React.createElement(MuiLink__default, { ...props, color: sxSupportedColor, sx: {
            // Setting the pseudo-classes color by default to prevent global CSS from overriding the link color on :hover.
            [LINK_PSEUDO_SELECTORS]: {
                color: sxSupportedColor,
            },
            ...sx,
        }, ref: ref }));
});
Link.defaultProps = {
    color: 'primary.main',
};

export { Link as default };
//# sourceMappingURL=index.esm.js.map
