{"version":3,"file":"index.esm.js","sources":["../../library/styles/theme-config/constants.ts","../../library/Link/Link.tsx"],"sourcesContent":["export const themePaletteSemanticColors = [\n\t'primary',\n\t'secondary',\n\t'error',\n\t'warning',\n\t'info',\n\t'success',\n\t'accent',\n\t'global',\n\t'promotion',\n] as const;\n\nexport const LINK_PSEUDO_SELECTORS = '&:hover,&:focus,&:active,&:visited';\n","import React from 'react';\nimport { default as MuiLink, LinkProps } from '@mui/material/Link';\nimport { LINK_PSEUDO_SELECTORS } from '../styles/theme-config/constants';\n\n/**\n * All supported colors for the Link component that can be passed as a string (without using primary.main, secondary.main, etc.).\n *\n * @see https://github.com/mui/material-ui/blob/f3945c1227afc13fbf732e66875095a793af2f10/packages/mui-material/src/Typography/Typography.js#L82\n */\nconst colorTransformations = {\n\tprimary: 'primary.main',\n\ttextPrimary: 'text.primary',\n\tsecondary: 'secondary.main',\n\ttextSecondary: 'text.secondary',\n\terror: 'error.main',\n};\n\n// The sx prop does not support the color values of the Link component, so we need to transform them to the correct format.\nconst convertToSxSupportedColor = ( color: LinkProps['color'] ) => {\n\t// Temporary customization until the pink color will be replaced with purple.\n\tif ( color === 'primary.main' || color === 'primary' ) {\n\t\treturn '#C00BB9';\n\t}\n\n\tif ( color === 'global.main' ) {\n\t\treturn '#17929B';\n\t}\n\n\treturn colorTransformations[ color as keyof typeof colorTransformations ] || color;\n};\n\n// Modified reason: the Link component does not provide default style for :hover, therefore global CSS can override the link color.\nconst Link = React.forwardRef<HTMLElement, LinkProps>( ( inProps, ref ) => {\n\tconst { sx = {}, ...props } = inProps;\n\n\tconst sxSupportedColor = convertToSxSupportedColor( props.color );\n\n\treturn (\n\t\t<MuiLink\n\t\t\t{ ...props }\n\t\t\tcolor={ sxSupportedColor }\n\t\t\tsx={ {\n\t\t\t\t// Setting the pseudo-classes color by default to prevent global CSS from overriding the link color on :hover.\n\t\t\t\t[ LINK_PSEUDO_SELECTORS ]: {\n\t\t\t\t\tcolor: sxSupportedColor,\n\t\t\t\t},\n\t\t\t\t...sx,\n\t\t\t} }\n\t\t\tref={ ref as React.MutableRefObject<null> }\n\t\t/>\n\t);\n} ) as React.FC<LinkProps>;\n\nLink.defaultProps = {\n\tcolor: 'primary.main',\n};\n\nexport default Link;\n"],"names":["MuiLink"],"mappings":";;;;AAYO,MAAM,qBAAqB,GAAG,oCAAoC;;ACRzE;;;;AAIG;AACH,MAAM,oBAAoB,GAAG;AAC5B,IAAA,OAAO,EAAE,cAAc;AACvB,IAAA,WAAW,EAAE,cAAc;AAC3B,IAAA,SAAS,EAAE,gBAAgB;AAC3B,IAAA,aAAa,EAAE,gBAAgB;AAC/B,IAAA,KAAK,EAAE,YAAY;CACnB,CAAC;AAEF;AACA,MAAM,yBAAyB,GAAG,CAAE,KAAyB,KAAK;;AAEjE,IAAA,IAAK,KAAK,KAAK,cAAc,IAAI,KAAK,KAAK,SAAS,EAAG;AACtD,QAAA,OAAO,SAAS,CAAC;AACjB,KAAA;IAED,IAAK,KAAK,KAAK,aAAa,EAAG;AAC9B,QAAA,OAAO,SAAS,CAAC;AACjB,KAAA;AAED,IAAA,OAAO,oBAAoB,CAAE,KAA0C,CAAE,IAAI,KAAK,CAAC;AACpF,CAAC,CAAC;AAEF;AACM,MAAA,IAAI,GAAG,KAAK,CAAC,UAAU,CAA0B,CAAE,OAAO,EAAE,GAAG,KAAK;IACzE,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,KAAK,EAAE,GAAG,OAAO,CAAC;IAEtC,MAAM,gBAAgB,GAAG,yBAAyB,CAAE,KAAK,CAAC,KAAK,CAAE,CAAC;IAElE,QACC,KAAC,CAAA,aAAA,CAAAA,gBAAO,EACF,EAAA,GAAA,KAAK,EACV,KAAK,EAAG,gBAAgB,EACxB,EAAE,EAAG;;YAEJ,CAAE,qBAAqB,GAAI;AAC1B,gBAAA,KAAK,EAAE,gBAAgB;AACvB,aAAA;AACD,YAAA,GAAG,EAAE;AACL,SAAA,EACD,GAAG,EAAG,GAAmC,EAAA,CACxC,EACD;AACH,CAAC,EAA0B;AAE3B,IAAI,CAAC,YAAY,GAAG;AACnB,IAAA,KAAK,EAAE,cAAc;CACrB;;;;"}